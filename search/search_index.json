{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Comfor is a modern, open-source simulation platform for composite forming and processing. Built in C++17/20, it uses an explicit finite element method (FEM) tailored to simulate complex manufacturing processes.</p> <p>Engineered for modularity, transparency, and performance, Comfor bridges the gap between industrial robustness and academic flexibility. Whether you're modeling advanced forming processes or developing custom material behaviors, Comfor provides a powerful, extensible framework.</p>"},{"location":"#why_comfor","title":"Why Comfor?","text":""},{"location":"#built_on_a_scientific_foundation","title":"\ud83d\udcda Built on a Scientific Foundation","text":"<p>Comfor is backed by over a decade of academic and industrial R&amp;D. Our numerical models are published, peer-reviewed, and validated in collaboration with:</p> <ul> <li>ENIB (Brest national school of engineering)</li> <li>INSA Lyon (Institut National des Sciences Appliqu\u00e9es de Lyon)</li> <li>IRT Jules Verne (French Institutes of Technology)</li> <li>UHA (Universit\u00e9 de Haute Alsace)</li> </ul> <p>Explore our references and publications in the Scientific References section.</p>"},{"location":"#transparent_physics_from_the_ground_up","title":"\ud83d\udd0d Transparent Physics, From the Ground Up","text":"<p>Forget the black-boxes. Fork the physics. At Innovamics, we expose every layer of the simulation stack\u2014because understanding and trust matter. From material laws to solvers, you can inspect, audit, and modify:</p> <ul> <li>Finite element formulations</li> <li>Contact and interaction models</li> <li>Boundary conditions and constraints</li> <li>Time integration schemes</li> <li>Plus every component involved in the simulation pipeline</li> </ul> <p>This enables researchers and engineers to:</p> <ol> <li>Audit and verify the mathematical models behind simulations</li> <li>Extend or adapt specific aspects of the physics for custom use cases</li> <li>Build trust in simulation results, with full control over assumptions and    implementations</li> </ol> <p>Our openness fosters a scientific environment where innovation, reproducibility, and transparency come first.</p> <p>We believe open software leads to better science and better engineering.</p>"},{"location":"#comfor_edition_comparison","title":"Comfor Edition ComparisonComfor CommunityComfor Enterprise","text":"<p>Free &amp; Open Source</p> <ul> <li>\u2714 Standard performance</li> <li>\u2714 Suitable for small teams</li> <li>\u2714 Community support</li> <li>\u2714 Basic configuration options</li> <li>\u2714 Standard toolkit</li> </ul> Best for students, individuals, small teams Download <p>Commercial Edition</p> <ul> <li>\u2714 High performance for large-scale use</li> <li>\u2714 Enterprise-level scalability</li> <li>\u2714 Dedicated priority support</li> <li>\u2714 Advanced configuration &amp; deployment</li> <li>\u2714 Enhanced toolkit with extra modules</li> </ul> Best for large organizations &amp; industrial teams Learn More"},{"location":"#ready_to_start","title":"\ud83d\ude80 Ready to Start?","text":"<p>If you're new to Comfor, here are the best places to begin:</p> <ul> <li>Quick Starter Guide \u2013 Minimal steps to run   your first simulation</li> <li>User Guide \u2013 Define models, materials, and   postprocess results</li> <li>Downloads \u2013 Get the latest binaries and example   cases.</li> </ul>"},{"location":"#for_developers","title":"\ud83d\udc68\u200d\ud83d\udcbb For Developers","text":"<p>Want to contribute or implement your own models? The Developer Guide walks you through building, testing, and extending Comfor.</p>"},{"location":"#lets_build_the_next_generation_of_composite_simulation_tools","title":"Let\u2019s build the next generation of composite simulation tools","text":"<p>Start contributing today or reach out if you want to collaborate on research, features, or integration.</p> <p>Visit the GitLab repository</p>"},{"location":"#license_and_credits","title":"License and Credits","text":"<p>Comfor Documentation by Eduardo Guzman is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.Based on a work at https://gitlab.com/comfor/comfor-doc.</p>"},{"location":"blog/2025/10/23/adding-blog/","title":"Adding the Blog Feature to the Comfor Documentation","text":"<p>We\u2019ve just added a blog feature to the Comfor documentation! The goal is to share updates, tips, and insights about the software in a more dynamic and accessible way.</p>","tags":["Comfor","Documentation","Blog"]},{"location":"blog/2025/10/23/adding-blog/#why_add_a_blog","title":"Why Add a Blog?","text":"<p>Until now, all information about Comfor was stored in the main documentation. With the new blog section, we can now:</p> <ul> <li>publish release notes and version updates,  </li> <li>share quick tips and short tutorials,    </li> <li>present use cases and research projects involving Comfor.</li> </ul> <p>Thanks for following the project!</p>","tags":["Comfor","Documentation","Blog"]},{"location":"developers/api/","title":"API","text":"<p>The Comfor API documentation provides comprehensive details for developers, contributors, and researchers aiming to extend the software\u2019s functionality, integrate custom modules, or explore its architecture.</p>"},{"location":"developers/api/#key_information","title":"Key Information","text":"<ul> <li>API Documentation \u2013 Complete reference for classes, methods, and interfaces.</li> <li>License Agreement \u2013 Terms governing the use, modification, and distribution of Comfor.</li> <li>Code of Conduct \u2013 Guidelines for contributions and community engagement.</li> </ul>"},{"location":"developers/api/#purpose","title":"Purpose","text":"<p>This documentation covers:</p> <ul> <li>Core physics and solver interfaces for implementing custom material models and boundary conditions.</li> <li>Data structures for mesh handling, post-processing, and simulation control.</li> <li>Extensibility mechanisms for adding new features or algorithms.</li> </ul> <p>Before contributing or modifying the codebase, please review the License and Code of Conduct.</p>"},{"location":"developers/api/#support","title":"Support","text":"<p>For questions or feedback, contact us via:</p> <ul> <li>GitLab Discussions</li> </ul>"},{"location":"developers/code_of_conduct/","title":"Code of conduct","text":"<p>This section details the coding style and formatting conventions used in the COMFOR project. These guidelines ensure consistency, readability, and long-term maintainability of the codebase.</p>"},{"location":"developers/code_of_conduct/#key_conventions","title":"Key Conventions","text":"<p>COMFOR follows an adapted version of the LLVM coding style.</p> Aspect Standard Indentation 4 spaces (no tabs) Max line length 80 characters Brace style K&amp;R / 1TBS Pointer alignment Left (<code>int* ptr;</code>) Namespace indentation None <code>switch</code> / <code>case</code> <code>case</code> aligned with <code>switch</code> File header Fixed format (see below) Enum declaration <code>enum class</code> Type aliases <code>using</code> (avoid <code>typedef</code>) Function/method names <code>camelCase</code> Class names <code>PascalCase</code> Private members <code>snake_case_</code> File extensions <code>.h</code> and <code>.cpp</code> (no <code>.hpp</code>) Doxygen comments <code>/// @</code> syntax only Required tools <code>clang-format \u2265 15</code> <p>For full details, refer to the <code>.clang-format</code> file in the project root.</p>"},{"location":"developers/code_of_conduct/#file_header_template","title":"File Header Template","text":"<p>Every <code>.h</code> or <code>.cpp</code> file must start with the following header:</p> <pre><code>//------------------------------------------------------------------------------\n// COMFOR - Simulation Framework for Composite Forming and Processing\n//------------------------------------------------------------------------------\n//\n// @file        file_name.ext\n// @brief       Description of the file content.\n// @author      Your Name &lt;your@email.com&gt;\n// @date        YYYY-MM-DD\n// @copyright   (C) 20XX-20YY Your Name/University/Company\n//\n// For licensing terms, see the LICENSE file in the root directory.\n//------------------------------------------------------------------------------\n</code></pre>"},{"location":"developers/code_of_conduct/#code_separators","title":"Code Separators","text":""},{"location":"developers/code_of_conduct/#long_separator_80_characters","title":"Long separator (80 characters)","text":"<pre><code>//------------------------------------------------------------------------------\n</code></pre>"},{"location":"developers/code_of_conduct/#section_separator","title":"Section separator","text":"<pre><code>// --- Section Title ---\n</code></pre>"},{"location":"developers/code_of_conduct/#vscode_snippets","title":"VSCode Snippets","text":"<p>Predefined snippets are available in <code>.vscode/comfor.code-snippets</code> to quickly insert headers and separators.</p> <p>How to use:</p> <ol> <li>Press Ctrl+Space to trigger snippets.</li> <li>Type the snippet name (e.g., <code>comfor_hpp</code> for a header file).</li> <li>Update placeholders (author, copyright, <code>@brief</code>).</li> </ol> <p>Available snippets:</p> <ul> <li><code>comfor_hpp</code> \u2192 Header file template.</li> <li><code>comfor_cpp</code> \u2192 Source file template.</li> <li><code>comfor_sep_long</code> \u2192 Long separator.</li> <li><code>comfor_sep_short</code> \u2192 Section separator.</li> <li><code>comfor_cmake_header</code> \u2192 CMakeLists.txt header.</li> </ul>"},{"location":"developers/code_of_conduct/#clion_live_templates","title":"CLion Live Templates","text":"<p>CLion automatically inserts COMFOR-style headers when creating new files (<code>.cpp</code>, <code>.h</code>, <code>CMakeLists.txt</code>). Templates are defined in <code>.idea/fileTemplates</code>.</p> <p>Post-insertion steps:</p> <ul> <li>Update author/contact information.</li> <li>Adjust copyright years.</li> <li>Complete Doxygen tags (e.g., <code>@brief</code>).</li> </ul>"},{"location":"developers/code_of_conduct/#include_what_you_use_iwyu","title":"Include What You Use (IWYU)","text":"<p>IWYU is integrated into COMFOR to optimize <code>#include</code> directives by:</p> <ul> <li>Removing unused includes.</li> <li>Adding missing includes.</li> <li>Replacing internal Eigen includes with <code>ComforMath.h</code>.</li> <li>Reducing build times and dependencies.</li> </ul>"},{"location":"developers/code_of_conduct/#installation","title":"Installation","text":"Windows Linux macOS  <p>IWYU is not officially supported on Windows. Manual setup requires a full LLVM/Clang toolchain and building IWYU from source.</p> <p>Debian/Ubuntu</p> <pre><code>sudo apt install include-what-you-use\n</code></pre> <p>Fedora</p> <pre><code>sudo dnf install include-what-you-use\n</code></pre> <p>Arch</p> <pre><code>sudo pacman -S include-what-you-use\n</code></pre> <p>Homebrew</p> <pre><code>brew install include-what-you-use\n</code></pre>"},{"location":"developers/code_of_conduct/#enable_iwyu_in_cmake","title":"Enable IWYU in CMake","text":"<p>Add the following to your <code>CMakeLists.txt</code>: <pre><code>option(USE_IWYU \"Enable include-what-you-use analysis\" ON)\nif(USE_IWYU)\n    find_program(IWYU_PATH NAMES include-what-you-use iwyu REQUIRED)\n    set(CMAKE_CXX_INCLUDE_WHAT_YOU_USE\n        ${IWYU_PATH}\n        -Xiwyu --comment_style=long\n        -Xiwyu --mapping_file=${CMAKE_SOURCE_DIR}/.iwyu-imp)\nendif()\n</code></pre></p>"},{"location":"developers/code_of_conduct/#manual_usage","title":"Manual Usage","text":"<p>Run IWYU manually with: <pre><code>python3 /usr/bin/iwyu_tool.py -p build \\\n  -- -Xiwyu --mapping_file=../.iwyu-imp &gt; out.txt\n</code></pre> Apply fixes with: <pre><code>python3 /usr/bin/fix_includes.py \\\n  --update_comments --reorder --nosafe_headers &lt; out.txt\n</code></pre></p>"},{"location":"developers/code_of_conduct/#final_notes","title":"Final Notes","text":"<ol> <li>Format your code with <code>.clang-format</code> before committing.</li> <li>Use official templates for headers and source files.</li> <li>Keep includes minimal with IWYU.</li> <li>Stay consistent with the project\u2019s coding standards.</li> </ol>"},{"location":"developers/git/","title":"Git","text":"<p>To start using Git from your computer, you must enter your credentials (user name and email) to identify you as the author of your work. The user name and email should match the ones you\u2019re using on GitLab.</p> <p>In your shell, add your user name:</p> <pre><code>git config --global user.name \"your_username\"\n</code></pre> <p>And your email address:</p> <pre><code>git config --global user.email \"your_email_address@example.com\"\n</code></pre> <p>To check the configuration, run:</p> <pre><code>git config --global --list\n</code></pre> <p>The <code>--global</code> option tells Git to always use this information for anything you do on your system. If you omit <code>--global</code> or use <code>--local</code>, the configuration is applied only to the current repository.</p> <p>You can read more on how Git manages configurations in Customizing-Git-Git-Configuration</p>"},{"location":"developers/git/#generate_an_ssh_key_pair","title":"Generate an SSH key pair","text":"<p>If you do not have an existing SSH key pair, generate a new one.</p> <ol> <li>Open a terminal.</li> <li> <p>Type <code>ssh-keygen -t</code> followed by the key type and an optional comment. This comment is included in the <code>.pub</code> file that\u2019s created. You may want to use an email address for the comment.</p> <p>For example, for ED25519:</p> <pre><code>ssh-keygen -t ed25519 -C \"&lt;comment&gt;\"\n</code></pre> </li> <li> <p>Press Enter. Output similar to the following is displayed:</p> </li> </ol> <pre><code>$ ssh-keygen -t ed25519 -C \"your_email@example.com\"\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/home/user/.ssh/id_ed25519):\n</code></pre> <ul> <li> <p>Accept the suggested filename and directory, unless you are generating a deploy key or want to save in a specific directory where you store other keys.</p> <p>You can also dedicate the SSH key pair to a specific host.</p> </li> <li> <p>Specify a passphrase:</p> <pre><code>Enter passphrase (empty for no passphrase):\nEnter same passphrase again:\n</code></pre> </li> </ul> <p>A confirmation is displayed, including information about where your files are stored.</p>"},{"location":"developers/git/#add_an_ssh_key_to_your_git_platform_account","title":"Add an SSH key to your Git platform account","text":"GitLab GitHub  <p>To use SSH with GitLab, add your public key to your GitLab account settings.</p> <ol> <li> <p>Copy the contents of your public key file. You can do this manually or use a script. For example, to copy an ED25519 key to the clipboard:</p> <p>macOS: <pre><code>tr -d '\\n' &lt; ~/.ssh/id_ed25519.pub | pbcopy\n</code></pre> Linux (requires the <code>xclip</code> package): <pre><code>xclip -sel clip &lt; ~/.ssh/id_ed25519.pub\n</code></pre> Git Bash on Windows: <pre><code>cat ~/.ssh/id_ed25519.pub | clip\n</code></pre></p> </li> <li> <p>Replace <code>id_ed25519.pub</code> with your filename. For example, use <code>id_rsa.pub</code> for RSA.</p> </li> <li>Sign in to GitLab.</li> <li>In the top-left corner, select your avatar.</li> <li>Select Settings.</li> <li>From the left sidebar, select SSH Keys.</li> <li>In the Key box, paste the contents of your public key. If you manually copied the key, make sure you copy the entire key, which starts with <code>ssh-ed25519</code> or <code>ssh-rsa</code>, and may end with a comment.</li> <li>In the Title text box, type a description, like Work Laptop or Home Workstation.</li> <li>Optional. In the Expires at box, select an expiration date. (Introduced in GitLab 12.9.) The expiration date is informational only, and does not prevent you from using the key. However, administrators can view expiration dates and use them for guidance when deleting keys.</li> <li>Select Add key.</li> </ol> <p>To use SSH with GitHub, add your public key to your GitHub account settings.</p> <ol> <li> <p>Copy the contents of your public key file. You can do this manually or use a script. For example, to copy an ED25519 key to the clipboard:</p> <p>macOS: <pre><code>tr -d '\\n' &lt; ~/.ssh/id_ed25519.pub | pbcopy\n</code></pre> Linux (requires the <code>xclip</code> package): <pre><code>xclip -sel clip &lt; ~/.ssh/id_ed25519.pub\n</code></pre> Git Bash on Windows: <pre><code>cat ~/.ssh/id_ed25519.pub | clip\n</code></pre></p> </li> <li> <p>Replace <code>id_ed25519.pub</code> with your filename. For example, use <code>id_rsa.pub</code> for RSA.</p> </li> <li>Sign in to GitHub.</li> <li>In the top-right corner, select your avatar.</li> <li>Select Settings.</li> <li>From the left sidebar, select SSH and GPG keys.</li> <li>Click New SSH key.</li> <li>In the Title field, add a descriptive label (e.g., Work Laptop or Home Workstation).</li> <li>In the Key field, paste your public key. Ensure the entire key is copied, starting with <code>ssh-ed25519</code>, <code>ssh-rsa</code>, or similar.</li> <li>Select Add SSH key.</li> </ol>"},{"location":"developers/license/","title":"License","text":""},{"location":"developers/license/#context","title":"Context","text":"<p>This Agreement is entered into between:</p> <ul> <li>You (the licensee), hereinafter referred to as \"Recipient\", and</li> <li>Innovamics, located at 87, Avenue des Fr\u00e8res Perret, 69190 Saint-Fons, hereinafter referred to as \"Licensor\".</li> </ul> <p>This Agreement governs the terms of use for the COMFOR software, developed by Eduardo Guzman Maldonado. The term \"SOFTWARE\" refers to the COMFOR software provided to the Recipient, including its binaries, executables, and any derived works.</p>"},{"location":"developers/license/#1_license","title":"1. License","text":"<p>The Licensor grants the Recipient a non-exclusive, non-transferable right to use the SOFTWARE. Clarification: The provision of the SOFTWARE does not constitute a transfer of any intellectual property rights held by the Licensor.</p>"},{"location":"developers/license/#2_termination","title":"2. Termination","text":"<p>The use of the SOFTWARE is subject to compliance with the terms of this Agreement.</p> <ul> <li>Obligations upon termination:   The Recipient must remove all copies of the SOFTWARE and discontinue all use.   Copies are permitted solely for use in accordance with this Agreement or for backup purposes.</li> <li>Termination conditions:<ul> <li>The Recipient may terminate this Agreement at any time by destroying the SOFTWARE and all its copies.</li> <li>The Licensor may terminate this Agreement in the event of non-compliance with its terms or upon 30 days' written notice.</li> <li>Upon termination, the Recipient agrees to destroy the SOFTWARE and all its copies.</li> </ul> </li> </ul>"},{"location":"developers/license/#3_copyright","title":"3. Copyright","text":"<ul> <li>The Recipient acknowledges that no intellectual property rights in the SOFTWARE are transferred.</li> <li>Full ownership of the SOFTWARE remains the exclusive property of the Licensor or its suppliers.</li> <li>The Recipient acquires no rights to the SOFTWARE except as expressly set forth in this Agreement.</li> </ul>"},{"location":"developers/license/#4_limitations","title":"4. Limitations","text":"<ul> <li>The Recipient may modify the SOFTWARE or create derivative works solely for research or academic purposes.</li> <li>Prohibitions:   The Recipient may not rent, lease, distribute, transfer, or sublicense the SOFTWARE or any derivative works to third parties without prior negotiation of a separate license agreement with the Licensor.</li> </ul>"},{"location":"developers/license/#5_disclaimer_of_warranty","title":"5. Disclaimer of Warranty","text":"<ul> <li>The SOFTWARE is provided \"AS IS\", without warranty of any kind.</li> <li>To the maximum extent permitted by applicable law, the Licensor disclaims all express or implied warranties, including (without limitation):</li> <li>Warranties of merchantability.</li> <li>Warranties of fitness for a particular purpose.</li> <li>Warranties of non-infringement.</li> <li>This disclaimer of warranty constitutes an essential part of this Agreement.</li> </ul>"},{"location":"developers/license/#6_limitation_of_liability","title":"6. Limitation of Liability","text":"<ul> <li>In no event shall the Licensor be liable to the Recipient for any indirect, special, incidental, or consequential damages of any kind arising from the delivery, use, or performance of the SOFTWARE.</li> <li>This limitation applies even if the Licensor has been advised of the possibility of such damages.</li> </ul>"},{"location":"docs/analysis/","title":"Running","text":"<p>As seen before, the pre-processing operation consist in generating the input ASCII text file of the model. The next step is to run comfor using this input file. The analysis will be performed and Comfor is going to generate several output files : Paraview files, CSV files and log files.</p>"},{"location":"docs/analysis/#starting_a_new_analysis","title":"Starting a new analysis","text":"<p>Comfor is execute from the terminal(command line) using the following syntax:</p> <pre><code>comfor &lt;input_file_name&gt;\n</code></pre> <ul> <li><code>&lt;input_file_name&gt;</code>: is the relatif or full path name to the input file. If the file is placed in the same folder of the comfor binary, you should indicate only the file name.</li> </ul> <p>Examples:</p> <pre><code>$ comfor test.bim\n$ comfor ./sim/test.bim\n$ comfor ../test.bim\n$ comfor /usr/name/sim/test.bim\n</code></pre>"},{"location":"docs/analysis/#run_time_information","title":"Run time information","text":"<p>During the analysis, Comfor will print periodically some useful information on the terminal. The frequency is the defined by the <code>print_step</code> defined in the control block.</p> <p>The output information is given by block with the general structure:</p> <pre><code>=================================\nElapsed time: 0.955748s\nCurrent time: 8s\nTime step: 0.001\nInternal energy: 35.2456\nKinetic energy: 0.0110008\n=================================\n</code></pre> <ul> <li><code>Elapsed time</code>: Is the user CPU time (real time) from the beginning of the simulation.</li> <li><code>Current time</code>: Is current time of the simulation</li> <li><code>Time step</code>: Is the current minimum time step of the whole model.</li> <li><code>Internal energy</code>: Is the energy generate by the internal forces int the whole model.</li> <li><code>Kinetic energy</code>: Is the kinetic energy in the whole model.</li> </ul> <p>Tip</p> <p>To stop a job just press Ctrl+C</p>"},{"location":"docs/analysis/#output","title":"Output","text":"<p>A new folder named <code>Results_&lt;file_name&gt;</code> is created in the same directory of the input file. This folder contains a s\u00e9rie of *.vtk files which can be viewed using paraview.</p>"},{"location":"docs/analysis/#errors_and_bugs","title":"Errors and bugs","text":"<p>If any error occurs, please contact us</p>"},{"location":"docs/elements/","title":"Elements","text":""},{"location":"docs/elements/#page_in_progress","title":"Page in Progress","text":"<p> This page is currently under development. We\u2019re working hard to bring you more detailed content soon.</p>"},{"location":"docs/materials/","title":"Materials","text":"<ul> <li> <p> Elastic</p> </li> <li> <p> Hyperelastic</p> </li> <li> <p> Composite</p> </li> </ul> <p>This section provides a practical overview of the material models available in Comfor. For detailed theoretical background, refer to the Theory section.</p>"},{"location":"docs/materials/#available_material_models","title":"Available material models","text":""},{"location":"docs/materials/#common_parameters_for_all_materials","title":"Common parameters for all materials","text":"Parameter Description Required <code>material_name</code> Custom name for the material. Yes <code>RHO</code> Mass density of the material. Yes <code>DAMPING</code> Mass proportional damping No"},{"location":"docs/materials/#elastic_models","title":"Elastic models","text":"<p>Elastic materials in Comfor are modeled using the Saint-Venant-Kirchhoff constitutive law, suitable for small strains and large rotations.</p> <p>Key parameters</p> <ul> <li><code>E</code>: Young's modulus</li> <li><code>NU</code>: Poisson's ratio</li> </ul> <p>Example</p> <pre><code>MATERIALS TYPE ELASTIC\n&lt;material_name&gt; RHO = &lt;mass_density&gt; DAMPING = &lt;damping_value&gt; E = &lt;young_modulus&gt; NU = &lt;poissons_ratio&gt;\n</code></pre>"},{"location":"docs/materials/#hyperelastic_models","title":"Hyperelastic models","text":"<p>Hyperelastic models are used for materials undergoing large deformations, such as rubber or textile composites.</p>"},{"location":"docs/materials/#ogden_model","title":"Ogden model","text":"<ul> <li>Suitable for isotropic hyperelastic materials (e.g., rubber, membranes).</li> <li>Requires parameters: <code>MU</code> (shear moduli) and <code>ALPHA</code> (dimensionless exponents).</li> </ul> <p>Example</p> <pre><code>MATERIALS TYPE HYPERELASTIC\n&lt;material_name&gt; RHO = &lt;mass_density&gt; DAMPING = &lt;damping_value&gt; TYPE = OGDEN MU = &lt;mu_1, mu_2, ...&gt; ALPHA = &lt;alpha_1, alpha_2, ...&gt;\n</code></pre> <p>Note</p> <p>The number of <code>MU</code> and <code>ALPHA</code> parameters must be equal.</p>"},{"location":"docs/materials/#composite","title":"Composite","text":"<ul> <li>Designed for anisotropic textile materials(e.g., woven composites).</li> <li>Requires orientation parameters for warp/weft directions and stiffness coefficients.</li> </ul> <p>Key parameters</p> <ul> <li><code>WARPORI</code>: Initial warp orientation (vector: <code>l1_x, l1_y, l1_z</code>).</li> <li><code>WEFTORI</code>: Initial weft orientation (vector: <code>l2_x, l2_y, l2_z</code>).</li> <li><code>KELONGWARP</code>, <code>KELONGWEFT</code>, <code>KSHEAR</code>: Stiffness coefficients for elongation and shear.</li> </ul> <p>Example</p> <pre><code>MATERIALS TYPE HYPERTEXTILE\n&lt;material_name&gt; RHO = &lt;mass_density&gt; DAMPING = &lt;damping_value&gt; WARPORI = &lt;l1_x, l1_y, l1_z&gt; WEFTORI = &lt;l2_x, l2_y, l2_z&gt; KELONGWARP = &lt;k1, k2, ...&gt; KELONGWEFT = &lt;k1, k2, ...&gt; KSHEAR = &lt;k1, k2, ...&gt;\n</code></pre>"},{"location":"docs/materials/#choose_a_material_model","title":"Choose a material model","text":"<ul> <li>Use Elastic for small strain applications (e.g., tools).</li> <li>Use Hyperelastic for finite strain for isotropic materials (e.g., rubber, membranes).</li> <li>Use Textile Composite for anisotropic woven materials.</li> </ul> <p>For advanced use cases, refer to the Theory section.</p>"},{"location":"docs/overview/","title":"Overview","text":"<p>Comfor is an explicit non linear finite element software for composite modelling modelling. It is suitable for dynamic transient response and some quasi static problems by using dynamic relaxation.</p> <p>The different materials, finite elements, contact laws come from confirmed and recent research works. </p> <p>This section will allow to establish the basic notions for the construction of a numerical model for Comfor, the simulation and its analysis. </p> <ul> <li> <p> Pre-processing</p> <p>Prepare your input file.</p> <p> Read more</p> </li> <li> <p> Analysis</p> <p>Run your simulation with Comfor.</p> <p> Read more</p> </li> <li> <p> Post-processing</p> <p>Explore and visualise your results.</p> <p> Read more</p> </li> </ul>"},{"location":"docs/overview/#core_concepts","title":"Core Concepts","text":"<p>Understand the building blocks of Comfor</p> <ul> <li> <p> Materials</p> <p>Explore the material models available in Comfor, based on recent research.</p> <p> Read more</p> </li> <li> <p> Elements</p> <p>Learn about finite elements, contact laws, and nodes.</p> <p> Read more</p> </li> <li> <p> Theory</p> <p>Dive into the theoretical foundations behind Comfor.</p> <p> Read more</p> </li> </ul>"},{"location":"docs/postprocessing/","title":"Postprocessing","text":"<p>VTK is the default output format for the results. In the future, other formats may be developed according to users and researchers needs.</p> <p>During the simulation Comfor writes several vtk files, one every <code>print_step</code>. These files are located in the folder <code>Results_&lt;file_name&gt;</code>.</p> <p>Exemple</p> <pre><code>Project_name\n  |\n  |---in_file.bim\n  |---Results_in_file\n  |     |--- in_file_0.vtk\n  |     |--- in_file_1.vtk\n  |     |--- in_file_2.vtk\n       ...\n</code></pre>"},{"location":"docs/postprocessing/#load_the_files","title":"Load the files","text":"<p>In order to visualize the results, open Paraview. Click on menu File-&gt;Open and look for the <code>Results_&lt;file_name&gt;</code>. Since Comfor names the files in ascending order, Paraview propose to open the files as a group.</p> Loading the files"},{"location":"docs/postprocessing/#play_the_animation","title":"Play the animation","text":"<p>After open the files, Paraview create a stage on the <code>Pipeline Browser</code>. If the mesh is not displayed you need to click in Apply in the properties section.</p> <p>Tip</p> <p>Activate the Auto Apply option in Paraview Preferences-&gt;General-&gt;Properties Panel Options.</p> <p>To play the animation, click the Play button on the VCR toolbar. The time toolbar shows the current frame displayed. You can also go frame by frame, go to the first or last frame, or play the animation in a loop.</p> <p>The data to be displayed can be selected in the Data Analysis toolbar. A list allows you to select the active variables for the current model, scalar and vectorial values defined either at the nodes or at the elements. This can be also changed on the properties section/Coloring. The default color maps can be changed to have a more suitable visual color gradient.</p> Playing the animation"},{"location":"docs/postprocessing/#applying_filters","title":"Applying filters","text":"<p>Paraview has a series of filters that allow us to manipulate the data and treat the simulation data. These filters can be applied in cascade to combine their functionalities. To apply a filter, click on menu Filters -&gt; Alphabetical, or search by category. The most common filters for our application are:</p> <ul> <li><code>Connectivity</code>: Identifies the mesh regions that are connected. The Connectivity filter assigns a region id (point data) to connected components of the input data set. We use this filter to separate the solid regions form the composite plates.</li> <li><code>Threshold</code>:This filter extracts elements that have nodal or element data scalars in the specified range. The Threshold filter extracts the portions of the input dataset whose scalars lie within the specified range. To specify the range, select your Threshold filter in the Pile Browser tree and expand the <code>Properties(Threshold)</code> section in the properties menu. Select the scalar to be evaluated and fix the max an min values. Finally click apply</li> <li><code>Cell to data point</code>: This filter allows to extrapolate element data to the nodes. It averages the values of the data of the elements surrounding a node to compute nodal information.</li> <li><code>Temporal interpolator</code>: Interpolate the solution between to frames. Useful to obtain nice and smooth animations for presentations.</li> <li><code>Plot data</code>: Plot data arrays from the input. This filter prepare arbitrary data to be plotted in any of the plots. By default the data is shown in a XY line plot. Use this filter to plot you csv files.</li> </ul> Applying filters"},{"location":"docs/postprocessing/#ressources","title":"Ressources","text":"<p>For more information you can read the different online tutorials:</p> <ul> <li>Official Paraview tutorial </li> <li>Cyprien Rusu tutorials</li> </ul>"},{"location":"docs/preprocessing/","title":"Preprocessing","text":"<p>Comfor has a general class for parsers <sup>1</sup>, so in the future we will be able to create subclasses to read different data from other software (e.g. Abaqus). But for the moment Comfor reads a generic ASCII text file organized by blocks. The extension of this file is not important, but in the future we will associate the extension *.bim (basic input model), the structure of this file is detailed below. </p> <p>However, in the general case, each input file must define the following points:</p> <ul> <li>Meshing<ul> <li>Nodes</li> <li>Elements</li> </ul> </li> <li>Material</li> <li>Boundary conditions</li> <li>Loads</li> <li>Analysis</li> </ul>"},{"location":"docs/preprocessing/#units","title":"Units","text":"<p>There are not unit system in Comfor. The user can use any consistent unit system see. The units must be consistent in that mathematical operations directly yield the correct units for the result quantity. For example for Newtons' law :</p> \\[ \\mathbf{f} = \\mathbf{M} \\mathbf{a} \\] <p>If the unit force is the the newton \\(N\\), the length unit is the \\(mm\\) and the time unit is the second \\(s\\), the units for acceleration are \\(mm/s^2\\) and the units for mass, must be \\(kg \\cdot 10^{3} = t\\) (metric ton).</p>"},{"location":"docs/preprocessing/#bim_input_file","title":"Bim input file","text":"<p>This type of file is structured by blocks. Each block is labeled and defines the input parameters of the model. Each block have a type depending on the label/category of the input data. The existing labels ans types are given in the following table.</p> <ul> <li><code>CONTROL</code> </li> <li><code>MATERIAL</code><ul> <li>Hyperelastic</li> <li>Hypertextile</li> <li>Elastic</li> </ul> </li> <li><code>CONTRAINTS</code><ul> <li>Boundary_conditions  </li> </ul> </li> <li><code>AMPLITUDES</code> <ul> <li>Tabular </li> </ul> </li> <li><code>NODES</code> </li> <li><code>ELEMENTS</code><ul> <li>Shell_C03</li> <li>Membrane_3</li> <li>Contact_triangle</li> <li>Contact_line</li> <li>Rod_2</li> </ul> </li> <li><code>TRACKERS</code> </li> </ul> <p>The general definition of one block is: </p> <pre><code>&lt;block_label&gt; TYPE &lt;type_block&gt;\n&lt;entry_1&gt;\n&lt;entry_2&gt;\n&lt;entry_3&gt;\n</code></pre> <p>Hint</p> <p>The order of the block in the input file has not impact for parsing operation</p>"},{"location":"docs/preprocessing/#control","title":"Control","text":"<p>This block defines the control parameters of the explicit analysis. </p> <ul> <li>Start and end time of the analysis<ul> <li><code>RUN FROM .. TO ..</code></li> </ul> </li> <li>Time step (optional)<ul> <li><code>STEP</code></li> </ul> </li> <li>Printing step<ul> <li><code>PRINT EVERY</code></li> </ul> </li> </ul> <p>The associated label is <code>CONTROLS</code>. </p> <p>Structure</p> <pre><code>CONTROLS\nRUN FROM &lt;start_time&gt; TO &lt;end_time&gt; STEP &lt;time_step&gt; \nPRINT EVERY &lt;print_step&gt; \n</code></pre> <p>If the <code>STEP</code> label is not specified, the time step will be set automatically according to the material and the mesh type.</p> <p>Note</p> <p>In future version the solver type would be defined here.</p>"},{"location":"docs/preprocessing/#materials","title":"Materials","text":"<p>This blocks defines the materials of the model. Each block contains a group of materials of the same type. The general structure is :</p> <pre><code>MATERIALS TYPE &lt;material_type_1&gt;\n&lt;material_1_name&gt; RHO = &lt;density&gt; DAMPING = &lt;material1_damping_value&gt; &lt;prop_1&gt; = &lt;value_prop_n&gt; ...\n&lt;material_2_name&gt; RHO = &lt;density&gt; DAMPING = &lt;material2_damping-value&gt; &lt;prop_1&gt; = &lt;value_prop_n&gt; ...\n\nMATERIALS TYPE &lt;material_type_2&gt;\n&lt;material_3_name&gt; RHO = &lt;density&gt; DAMPING = &lt;material1_damping_value&gt; &lt;prop_n&gt; = &lt;value_prop_n&gt; ...\n&lt;material_4_name&gt; RHO = &lt;density&gt; DAMPING = &lt;material2_damping-value&gt; &lt;prop_n&gt; = &lt;value_prop_n&gt; ...\n</code></pre> <ul> <li><code>&lt;material_type&gt;</code> defines the constitutive model of the material. </li> <li><code>&lt;material_1_name&gt;</code> is the custom name for the material 1 (defined by the user)</li> <li><code>RHO</code> parameter make reference to the mass density of the material and must be defined in all cases.  </li> <li><code>DAMPING</code> is the mass proportional damping. This factor introduces damping forces caused by the absolute velocities of the model. This parameter is optional.</li> <li><code>&lt;prop_n&gt;</code> Defines the value of the property with name <code>prop_n</code>. The labels depends of each material. </li> </ul> <p>To see the available list of materials see Material </p> <p>Example: </p> <pre><code>MATERIAL TYPE Elastic\naluminium rho = 2.7e-9 nu=0.3 E=70000\n</code></pre>"},{"location":"docs/preprocessing/#amplitudes","title":"Amplitudes","text":"<p>An amplitude allows to impose a time dependent behavior for constraints and loads.</p> <p>Structure</p> <pre><code>AMPLITUDES TYPE &lt;amplitude_type_1&gt;\n&lt;amplitude_1_name&gt; &lt;prop_n&gt; = &lt;value_prop_n&gt; ...\n&lt;amplitude_2_name&gt; &lt;prop_n&gt; = &lt;value_prop_n&gt; ...\n</code></pre> <ul> <li><code>&lt;amplitude_type&gt;</code> defines the amplitude type of the model material. </li> <li><code>amplitude_1_name&gt;</code> is the custom name for the first amplitude 1 (defined by the user)</li> <li><code>&lt;prop_n&gt;</code> Defines the value of the property with name <code>prop_n</code>. The labels depends of each amplitude type.</li> </ul> <p>At this moment only tabular amplitudes are supported. The structure is given by:</p> <pre><code>AMPLITUDES TYPE TABULAR\n&lt;amplitude_1_name&gt; VALUES = &lt;t1 , v1, t2, v2, ... , tn, vn&gt;\n&lt;amplitude_2_name&gt; VALUES = &lt;t1 , v1, t2, v2, ... , tn, vn&gt;\n</code></pre> <p>where <code>tn, vn</code> defines the value \\(v_n\\) of the amplitude at time \\(t_n\\). The values between \\(t_n\\) and \\(t_{n+1}\\) are linear interpolated.</p> <p>Example: </p> <p><pre><code>AMPLITUDES TYPE TABULAR\nPalier   VALUES = 0, 0 ,1 ,1 ,5, 6, 0, 7, 0\nIncrease VALUES = 0, 0 ,7 ,1 \nDecrease VALUES = 0, 1 ,7 ,0 \n</code></pre> Defines the amplitude: </p> D\u00e9sol\u00e9, votre navigateur ne prend pas en charge &lt;canvas&gt;."},{"location":"docs/preprocessing/#constraints","title":"Constraints","text":"<p>This block defines the different constraints of the model. Each Block contains different constraints of the same type. </p> <p>Structure</p> <pre><code>CONSTRAINTS TYPE &lt;constraint_type_1&gt;\n&lt;constraint_1_name&gt; &lt;prop_n&gt; = &lt;value_prop_n&gt; ...\n\nCONSTRAINTS TYPE &lt;constraint_type_1&gt;\n&lt;constraint_n_name&gt; &lt;prop_n&gt; = &lt;value_prop_n&gt; ... AMPLITUDE = &lt;amplitude_name&gt;\n</code></pre> <ul> <li><code>&lt;constraint_type&gt;</code>: defines the constraint type of the model material. </li> <li><code>contraint_n_name&gt;</code>: is the custom name for the amplitude n (defined by the user)</li> <li><code>&lt;prop_n&gt;</code>: Defines the value of the property with name <code>prop_n</code>. The labels depends of each constraint type type.</li> <li><code>AMPLITUDE</code>: Indicates that an amplitude is associated to this constraint<ul> <li><code>&lt;amplitude_name&gt;</code>: amplitude name to be applied to this constraint, as specified in the amplitude block.</li> </ul> </li> </ul> <p>At this moment only the only type of constraint is <code>boundary_conditions</code>. This constraints allows to fix the degrees of freedom of the node.The structure is given by:</p> <p><pre><code>CONSTRAINTS TYPE BOUNDARY_CONDITION\n&lt;bc_1_name&gt; VX = &lt;value&gt; VY = &lt;value&gt; VZ = &lt;value&gt; VRX = &lt;value&gt; VRY = &lt;value&gt; VRZ = &lt;value&gt; AX = &lt;value&gt; AY = &lt;value&gt; AZ = &lt;value&gt; ARX = &lt;value&gt; ARY = &lt;value&gt; ARZ = &lt;value&gt;\n&lt;bc_with_amplitude&gt; VX = &lt;value&gt;  ... AMPLITUDE = &lt;amplitude_name&gt;\n</code></pre> where <code>VI</code> defines the value displacement rate in direction I(X,Y,Z), <code>VRI</code> defines the rotational rate in direction I(X,Y,Z), <code>AI</code> defines the value displacement acceleration in direction I(X,Y,Z), <code>ARI</code> defines the rotational acceleration rate in direction I(X,Y,Z). Finally, you can use an amplitude from the amplitude block to modify the absolute value of the boundary condition. </p> <p>Note</p> <p>If the DOF is not fixed, then is free. </p> <p>Example: </p> <p><pre><code>CONSTRAINTS TYPE BOUNDARY_CONDITION\nFIX_ROT  VRX = O. VRY = O. VRZ = O.\nPINNED   VX = O.  VY = O.  VZ = O.\nVX_AMP   VX = 1.  AMPLITUDE = Increase\n\nAMPLITUDES TYPE TABULAR\nIncrease VALUES = 0, 0 ,7 , 2.5 \n</code></pre> The displacement rate evolution is given by: </p> D\u00e9sol\u00e9, votre navigateur ne prend pas en charge &lt;canvas&gt;. <p>Tip</p> <p>The order of blocks doesn't have any importance, you can make reference to an amplitude even if the amplitude block is defined after.</p>"},{"location":"docs/preprocessing/#loads","title":"Loads","text":"<p>This block defines the different loads of the model. Each block may contain loads of different types.</p> <p>Structure</p> <pre><code>LOADS \n&lt;load_1_name&gt; &lt;load_type_1&gt; = &lt;value_Load&gt; &lt;load_type_2&gt; = &lt;value_Load&gt;\n&lt;load_2_name&gt; &lt;load_type_3&gt; = &lt;value_Load&gt; Amplitude = &lt;amplitude_name&gt;\n</code></pre> <ul> <li><code>&lt;load_n_name&gt;</code>: is the custom name for the load n (defined by the user)</li> <li><code>&lt;load_type&gt;</code>: Defines the type of load to be defined, options are:<ul> <li><code>P</code>: Defines a normal pressure to an element face</li> <li><code>AX,AY,AZ</code>: Defines nodal acceleration field in the direction <code>X,Y,Z</code></li> <li><code>FX,FY,FZ</code>: Defines a punctual nodal force in the direction <code>X,Y,Z</code></li> </ul> </li> <li><code>AMPLITUDE</code>: Indicates that an amplitude is associated to this load.<ul> <li><code>&lt;amplitude_name&gt;</code>: amplitude name to be applied to this load as specified in the amplitude block.</li> </ul> </li> </ul> <p>Example:</p> <pre><code>LOADS\npunctual_force   FX = 1.0\ngravity_field    AZ = 9.8\nnormal_pressure  P =  1.0 AMPLITUDE = vacuum\n\nAMPLITUDES TYPE TABULAR\nvacuum VALUES = 0., 0. , 5., -1.0 \n</code></pre> D\u00e9sol\u00e9, votre navigateur ne prend pas en charge &lt;canvas&gt;."},{"location":"docs/preprocessing/#nodes","title":"Nodes","text":"<p>This block defines the position of the different nodes in the model, *and eventually the constraints and loads applied to each node. </p> <p>Structure</p> <pre><code>NODES\n&lt;node_number_1&gt; X = &lt;x_coord&gt; Y = &lt;y_coord&gt; Z = &lt;z_coord&gt;\n&lt;node_number_2&gt; X = &lt;x_coord&gt; Y = &lt;y_coord&gt; Z = &lt;z_coord&gt; CONSTRAINT = &lt;constraint_name&gt; LOAD = &lt;load_name&gt; \n</code></pre> <ul> <li><code>&lt;node_number&gt;</code>: integer node number</li> <li><code>&lt;X&gt;</code>: x-coordinate</li> <li><code>&lt;Y&gt;</code>: y-coordinate</li> <li><code>&lt;Z&gt;</code>: z-coordinate</li> <li><code>CONSTRAINT</code>: Indicates that a constraint is associated to this node.<ul> <li><code>&lt;constraint_name&gt;</code>: constraint name to be applied to this node as specified in the constraint block.</li> </ul> </li> <li><code>LOAD</code>: Indicates that a load is associated to this node.<ul> <li><code>&lt;load_name&gt;</code>: load name to be applied to this node as specified in the load block.</li> </ul> </li> </ul> <p>Example:</p> <pre><code>NODES\n1   X =  3.0    Y = 2.0 Z = 0.0 CONSTRAINT = FIXED_XY\n2   X =  5.0    Y = 8.0 Z = 0.0 LOAD = P_FORCE\n3   X =  7.0    Y = 2.0 Z = 0.0 CONSTRAINT = FIXED_XY \n\nCONSTRAINTS TYPE BOUNDARY_CONDITION\nFIXED_XY VX = 0 VY = 0 VZ = 0\n\nLOADS\nP_FORCE   FZ = 1.0\n</code></pre> <p>This defines 3 points :</p> D\u00e9sol\u00e9, votre navigateur ne prend pas en charge &lt;canvas&gt;."},{"location":"docs/preprocessing/#elements","title":"Elements","text":"<p>This block defines the different elements of the model. Each block contains a group of elements of the same type. The general structure is:</p> <p>Structure</p> <pre><code>ELEMENTS TYPE &lt;element_type&gt;\n&lt;element_number_1&gt; NODES = &lt;node_number_1 node_number_2 node_number_3 ...&gt; MATERIAL = &lt;material_name&gt; T = &lt;thickness_value&gt; LOAD = &lt;load_name&gt; &lt;prop_n&gt; = &lt;value_prop_n&gt; ... \n</code></pre> <ul> <li><code>&lt;element_number&gt;</code>: integer element number</li> <li><code>NODES</code>: defines the connectivity input of the element<ul> <li><code>&lt;node_number_1&gt;</code>: number of the first node as given in the node block</li> <li><code>&lt;node_number_2&gt;</code>: number of the second node as given in the node block</li> <li><code>&lt;node_number_3&gt;</code>: number of the third node as given in the node block</li> <li>...</li> </ul> </li> <li><code>MATERIAL</code>: defines the material of the element<ul> <li><code>&lt;material_name&gt;</code>: material name as given in the material block</li> </ul> </li> <li><code>T</code>: Defines the thickness value (only for shells)<ul> <li><code>&lt;thickness_value&gt;</code>: the thickness value</li> </ul> </li> <li><code>LOAD</code>: Indicates that a load is associated to this element.<ul> <li><code>&lt;load_name&gt;</code>: load name to be applied to this element as specified in the load block.</li> </ul> </li> <li><code>&lt;prop_n&gt;</code> Defines the value of the property with name <code>prop_n</code>. The labels depends of each element </li> </ul> <p>To see the available list of materials see Elements </p> <p>Example: </p> <pre><code>ELEMENTS TYPE MEMBRANE_3\n1 NODES = [1, 2, 3] MATERIAL = elastic T =  1.0 LOAD = vacuum\n</code></pre> <p>This defines a triangular membrane element from node 1, 2 and 3, using the constitutive behavior defined for the elastic material.</p> D\u00e9sol\u00e9, votre navigateur ne prend pas en charge &lt;canvas&gt;."},{"location":"docs/preprocessing/#contact","title":"Contact","text":"<p>Contact is enable by adding the key label <code>CONTACT =</code> after the definition of each element line. Friction is enable by using <code>FRICTION = &lt;friction_value&gt;</code>. You can specify two contact types:</p> <ul> <li><code>CONTACT = BASIC</code>: The element (contact surface) is going to detect the nodes penetrating the surface and is gonna compute the necessary force to enforce contact.</li> <li><code>CONTACT = EDGE</code>: Enables contact surface + detects any edge in contact with the edges of the element.</li> </ul> <p>Example: </p> <pre><code>ELEMENTS TYPE MEMBRANE_3\n1 NODES = [1, 2, 3] MATERIAL = elastic T =  1.0 CONTACT = edge FRICTION = 0.2\n</code></pre>"},{"location":"docs/preprocessing/#trackers","title":"Trackers","text":"<p>Finally we can use tracker objects to track some nodal or element information. This information is printed into a CSV file for each <code>print_step</code> and for each node/element specified in the tracker definition. </p> <p>Structure</p> <pre><code>TRACKER TYPE &lt;tracker_type&gt;\n&lt;tracker_1_name&gt; &lt;list&gt; = &lt;object_number&gt; TYPE = &lt;information_type&gt; &lt;prop_n&gt; = &lt;value_prop_n&gt; ... \n&lt;tracker_2_name&gt; &lt;list&gt; = &lt;object_number&gt; TYPE = &lt;information_type&gt; &lt;prop_n&gt; = &lt;value_prop_n&gt; ... \n</code></pre> <ul> <li><code>&lt;tracker_type&gt;</code>: defines the the tracker nature of the block.<ul> <li><code>ELEMENT</code>: define a tracker block for elements.</li> <li><code>NODES</code>: define a tracker block for nodes.</li> </ul> </li> <li><code>&lt;tracker_n_name&gt;</code> is the custom name for the tracker n (defined by the user)</li> <li><code>&lt;list&gt;</code>: lit of nodes or elements to be tracked.  <ul> <li><code>NODES</code>: follow by the node numbers to be tracked.</li> <li><code>ELEMENTS</code>: follow by the element numbers to be tracked.</li> </ul> </li> <li><code>&lt;prop_n&gt;</code> Defines the value of the property with name <code>prop_n</code>. The labels depends of each tracker block.</li> </ul> <p>As you see, we can track nodal an element information. </p> <p>For nodes :</p> <pre><code>TRACKER TYPE NODES\n&lt;tracker_1_name&gt; NODES = &lt;node_number_1 node_number_2 node_number_3 ...&gt;  TYPE = &lt;information_type&gt; DIRECTION = &lt;direction_axis&gt; \n</code></pre> <ul> <li><code>NODES</code>: defines the list of the nodes ID to be tracked<ul> <li><code>&lt;node_number_1&gt;</code>: number of the first node as given in the node block</li> <li><code>&lt;node_number_2&gt;</code>: number of the second node as given in the node block</li> <li><code>&lt;node_number_3&gt;</code>: number of the third node as given in the node block</li> <li>...</li> </ul> </li> <li><code>TYPE</code>: nodal information to be tracked.<ul> <li><code>FORCE</code>: Nodal force</li> <li><code>MOMENT</code>: Nodal moments </li> <li><code>POSITION</code>: Nodal position</li> <li><code>VELOCITY</code>: Nodal velocity</li> <li><code>ACCELERATION</code>: Nodal acceleration</li> <li><code>CONTACTFORCE</code>: Nodal contact force</li> </ul> </li> <li><code>DIRECTION</code>: Component of the nodal information tensor<ul> <li><code>X</code>: X component</li> <li><code>Y</code>: Y component</li> <li><code>Z</code>: Z component</li> </ul> </li> </ul> <p>Example:</p> <pre><code>TRACKERS TYPE NODE\nFY NODES = [7,8] DIRECTION = Y TYPE = FORCE\n</code></pre> <p>For elements :</p> <pre><code>TRACKER TYPE ELEMENT\n&lt;tracker_1_name&gt; ELEMENTS = &lt;element_number_1 element_number_2 element_number_3 ...&gt;  TYPE = &lt;type_tensor&gt; COMPONENT = &lt;component_tensor&gt;\n</code></pre> <ul> <li><code>NODES</code>: defines the list of the nodes ID to be tracked<ul> <li><code>&lt;node_number_1&gt;</code>: number of the first node as given in the node block</li> <li><code>&lt;node_number_2&gt;</code>: number of the second node as given in the node block</li> <li><code>&lt;node_number_3&gt;</code>: number of the third node as given in the node block</li> <li>...</li> </ul> </li> <li><code>TYPE</code>: element information to be tracked.<ul> <li><code>STRESS</code>: Stress tensor</li> <li><code>STRAIN</code>: Strain tensor </li> </ul> </li> <li><code>COMPONENT</code>: Component of the tensor<ul> <li><code>Cii</code>: Gives the component \\({A}_{ii}\\) of the tensor \\(\\mathbf{A}\\) of type <code>&lt;type_tensor&gt;</code></li> </ul> </li> </ul> <p>Example:</p> <pre><code>TRACKERS TYPE ELEMENT \nshear_angle_a ELEMENTS = [3,5,6,7,8,9] COMPONENT = C23 TYPE = strain\nshear_angle_b ELEMENTS = [2,4,10,12] COMPONENT = C23 TYPE = strain\nshear_angle_c ELEMENTS = [1,11] COMPONENT = C23 TYPE = strain\n</code></pre> <ol> <li> <p>Parsing, syntax analysis, or syntactic analysis is the process of analyzing a string of symbols, either in natural language, computer languages or data structures, conforming to the rules of a formal grammar. Wikipedia \u21a9</p> </li> </ol>"},{"location":"docs/theory/continuum_mechanics/","title":"Continuum Mechanics","text":""},{"location":"docs/theory/continuum_mechanics/#description_of_the_motion","title":"Description of the motion","text":"<p>The motion in any point of a solid region \\(\\Omega\\) in space with boundary surface \\(\\partial\\Omega\\), is described by the bijective function \\(\\Phi\\):</p> \\[ \\mathbf{x} = \\Phi \\left(\\mathbf{X},t\\right) \\] <p>which gives the position vector \\(\\mathbf{x}\\) at time \\(t\\) of any particle which previously occupied the position \\(\\mathbf{X}\\). For a fixed time \\(t\\), this function defines the deformation at any point of a solid between a reference configuration \\(C_0\\) and a current configuration \\(C_t\\).</p> Initial configuration and current distorted configuration <p>In solid mechanics, the reference configuration \\(C_0\\) is usually associated with the initial state of the undeformed solid, which allows the two configurations to be associated in the same axis system. Nevertheless, it is preferable to treat these two systems separately and to distinguish between Lagrangian or material coordinates for the \\(C_0\\) configuration and Eulerian or spatial coordinates for the current \\(C\\left(t\\right)\\) configuration. By abuse of language the time dependence t will be omitted in the following assuming \\(t &gt; 0\\).</p>"},{"location":"docs/theory/continuum_mechanics/#deformation_gradient_tensor","title":"Deformation gradient tensor","text":"<p>In order to describe the kinematics in the vicinity of a given point \\(\\mathbf{X}\\), we introduce the gradient tensor of the transformation, also called the linear tangent application, defined as the Jacobian of the application \\(\\Phi\\) . The vector \\(d\\mathbf{x}\\) then takes the form:</p> \\[ d\\mathbf{x} \\left(\\mathbf{X},t \\right) =\\frac{\\partial \\Phi }{\\partial \\mathbf{X}}d\\mathbf{X}=\\mathbf{F}d\\mathbf{X} \\] \\[ \\mathbf{F} = \\frac{\\partial \\mathbf{x} }{\\partial \\mathbf{X}} \\] <p>The gradient tensor of the transformation \\(\\mathbf{F}\\), is thus an application which transforms a given elementary material vector \\(d\\mathbf{X}\\) into its Eulerian counterpart \\(d\\mathbf{x}\\). This tensor gives a local description, to the first order, of the solid transformation.</p> <p>We also define the transformation of an elementary volume element. Let be a volume element in the reference configuration, \\(d\\Omega_0 \\in C_0\\). Its deformed counterpart in the current configuration, \\(d\\Omega \\in C_t\\), is given by the determinant of the Jacobian matrix of the gradient tensor of the transformation, called Jacobian:</p> \\[ dv=JdV \\quad \\mathrm{with} \\quad J=\\mathrm{det} \\left( \\mathbf{F} \\right) \\] <p>The local condition of impenetrability of matter requires that:</p> \\[ J\\left( X\\right) &gt; 0 \\] <p>We also define the transformation of a surface element \\(dS\\) of normal \\(\\mathbf{N}\\) in initial configuration into a surface element \\(ds\\) of normal \\(\\mathbf{n}\\) using the Nanson formula:</p> \\[ \\mathbf{n} ds =J\\mathbf{F}^{-T}\\mathbf{N}dS \\]"},{"location":"docs/theory/continuum_mechanics/#strain_measurement","title":"Strain measurement","text":"<p>In order to define its deformation, it is necessary to characterize the changes in shape, i.e. the variations in length and angle. These are in fact the variations of the scalar products of material vectors \\(d\\mathbf{X}\\) and \\(\\delta \\mathbf{X}\\), becoming \\(d\\mathbf{x}\\) and \\(\\delta \\mathbf{x}\\) after transformation:</p> \\[ d \\mathbf{x} \\cdot \\delta \\mathbf{x} = \\left( \\mathbf{F} d\\mathbf{X} \\right)^{T} \\cdot \\left( \\mathbf{F} \\delta \\mathbf{X} \\right) = d \\mathbf{X}  \\cdot \\mathbf{ C}   \\cdot \\delta \\mathbf{X} \\] <p>where \\(\\mathbf{C}\\) denotes the right Cauchy-Green expansion tensor and \\(\\mathbf{B}\\) the left Cauchy-Green tensor defined by :</p> \\[ \\mathbf{C}=\\mathbf{F}^{T}\\mathbf{F} \\] <p>From the variation of these scalar products, we obtain the associated deformation:</p> \\[ \\begin{align} d\\mathbf{x} \\cdot \\delta \\mathbf{x} - d\\mathbf{X} \\cdot\\delta \\mathbf{X} &amp;= d\\mathbf{X} \\cdot \\mathbf{ C} \\delta \\mathbf{X} - d\\mathbf{X} \\cdot\\delta \\mathbf{X} \\\\ &amp;=d\\mathbf{X} \\cdot \\left( \\mathbf{ C} - \\mathbf{I} \\right) \\delta \\mathbf{X} \\\\ &amp;=d\\mathbf{X} \\cdot 2 \\mathbf{ E}\\, \\delta \\mathbf{X} \\end{align} \\] <p>\\(\\mathbf{E}\\) is the Green-Lagrange deformation tensor given by :</p> \\[ \\mathbf{E} = \\frac{1}{2} \\left( \\mathbf{C} - \\mathbf{I} \\right) \\] <p>In small deformations, this tensor merges with the linearized deformation tensor \\(\\mathbf{\\varepsilon}\\). The tensors \\(\\mathbf{C}\\) and \\(\\mathbf{E}\\) are defined with respect to the initial configuration and to variations of elementary material vectors. As such, they are qualified as Lagrangian. By repeating the same process, expressing \\(d\\mathbf{X} \\cdot\\delta \\mathbf{X}\\) and then the variation of the scalar products in the spatial basis, we obtain their Eulerian equivalents in the current configuration:</p> \\[ \\begin{align} \\mathbf{b} &amp;= \\mathbf{F} \\mathbf{F}^{T} \\\\ \\mathbf{e} &amp;= \\frac{1}{2}\\left( \\mathbf{C} - \\mathbf{B}^{-1} \\right) \\end{align} \\] <p>with \\(\\mathbf{b}\\) the left Cauchy-Green tensor and \\(\\mathbf{e}\\) the Euler-Almansi tensor of deformations.</p> <p>The writing of the principle of virtual powers, as well as some behavioral laws (hypoelastic, viscoelastic), requires to define the notion of strain rate.</p> \\[ \\begin{align} d \\dot{\\mathbf{x}} &amp;= \\dot{\\mathbf{F}} d\\mathbf{X} \\\\ &amp;= \\dot{\\mathbf{F}} \\mathbf{F}^{-1} d\\mathbf{x} \\\\ &amp;= \\mathbf{L} d \\mathbf{x} \\end{align} \\] \\[  \\mathbf{L} = \\dot{\\mathbf{F}} \\mathbf{F}^{-1} = \\frac{\\partial \\mathbf{v}}{\\partial \\mathbf{x}}= \\mathrm{grad} \\mathbf{v} \\] <p>The \\(\\mathbf{L}\\) tensor is called the velocity gradient tensor. It is classically decomposed into a symmetric term \\(\\mathbf{D}\\) (deformation rate tensor) and an antisymmetric term \\(\\mathbf{\\omega}\\) (spin tensor):</p> \\[ \\begin{aligned} \\mathbf{D} &amp;= \\mathbf{L}^\\mathrm{S} = \\frac{1}{2} \\left( \\mathbf{L}+ \\mathbf{L}^{T} \\right) \\\\ \\mathbf{\\omega} &amp;= \\mathbf{L}^\\mathrm{A} = \\frac{1}{2} \\left( \\mathbf{L}-\\mathbf{L}^{T} \\right) \\end{aligned} \\] <p>The strain rate describes the rate of deformation of the considered solid. This measure is associated with the current configuration. To be measured in the initial configuration, \\(\\mathbf{D}\\) is pull back:</p> \\[ \\dot{\\mathbf{E}} =\\mathbf{F}^{T} \\mathbf{D} \\mathbf{F} \\] <p>where \\(\\dot{\\mathbf{E}}\\) is the Lagrangian strain rate.</p>"},{"location":"docs/theory/continuum_mechanics/#polar_decomposition","title":"Polar decomposition","text":"<p>The deformation gradient tensor can be expressed as the product of a rotation tensor \\(\\mathbf{R}\\) time the stretch tensor \\(\\mathbf{U}\\).</p> \\[ \\mathbf{F} = \\mathbf{R} \\mathbf{U} \\] <p>The rotation tensor being orthogonal \\(\\mathbf{R}^{T} \\mathbf{R} = \\mathbf{I}\\), the definition of the stretch tensor can be deduced from the definition of the right Cauchy-Green tensor:</p> \\[ \\mathbf{C}= \\mathbf{U}^{T}\\mathbf{R}^{T} \\mathbf{R} \\mathbf{U} = \\mathbf{U}^2 \\] <p>An eigenvalue analysis of \\(\\mathbf{C}\\) gives the principal directions \\(\\mathbf{N}_{i}\\) and the corresponding eigen values \\(\\lambda_{i}\\).</p> \\[ \\mathbf{C}= \\lambda_{i}^2 \\mathbf{N}_{i} \\otimes \\mathbf{N}_{i} \\] <p>The material stretch tensor \\(\\mathbf{U}^2\\) can be deduced:</p> \\[ \\mathbf{U}= \\lambda_{i} \\mathbf{N}_{i} \\otimes \\mathbf{N}_{i} \\]"},{"location":"docs/theory/continuum_mechanics/#stress_measurement","title":"Stress measurement","text":"<p>Let a deformable solid be virtually cut into two subdomains, before and after transformation. The equilibrium of each of the two subdomains thus defined imposes the existence of internal forces at the boundary. As in the case of small deformations, we define in the present configuration the stress vector \\(\\mathbf{t}\\) which characterizes the internal cohesive forces \\(\\mathbf{f}\\) exerted on a part of the solid through the surface \\(ds\\) of external normal \\(\\mathbf{n}\\):</p> \\[ \\mathbf{t}=\\frac{d\\mathbf{f}}{ds} \\] Stress vector definition <p>According to Cauchy's theorem, for a given point, the stress vector depends linearly on the normal vector \\(\\mathbf{n}\\). Then there exists a tensor of order two, called the Cauchy stress tensor \\(\\mathbf{sigma}\\), such that:</p> \\[ \\mathbf{t} = \\mathbf{\\sigma} \\mathbf{n} \\] <p>The fundamental principle of dynamics allows us to demonstrate that this Cauchy stress tensor is symmetric. The force exerted on the elementary surface is given by:</p> \\[ d\\mathbf{f} = \\mathbf{\\sigma} \\mathbf{n} ds \\] <p>The Cauchy tensor thus represents the internal forces expressed in the current configuration. In the same way as for the different measures of deformation established previously, it is possible to define other measures of internal forces. Thus, noting \\(d\\mathbf{F}\\), \\(dS\\) and \\(\\mathbf{N}\\) the internal force, the surface and its normal in the initial configuration, we define the two tensors \\(\\mathbf{P}\\) and \\(\\mathbf{S}\\) as follows:</p> \\[ \\begin{align} d\\mathbf{f} &amp; = \\mathbf{P} \\mathbf{N} dS \\\\ d\\mathbf{F} &amp; = \\mathbf{S} \\mathbf{N} dS \\end{align} \\] <p>These tensors are respectively called first Piola-Kirchhoff tensor (PK1) (or Boussinesq tensor), second Piola-Kirchhoff tensor (PK2) or Piola Lagrange tensor. In small deformations, these tensors are identical. On the other hand, we introduce the Eulerian tensor \\(\\mathbf{\\tau}=J\\mathbf{\\sigma}\\), called Kirchoff stress tensor; it is a symmetrical tensor which plays an important role for the variational formulation of problems in large deformation.</p> <p>The links between these different tensors are given by:</p> \\[ \\begin{aligned} \\mathbf{\\tau} &amp;= J\\mathbf{\\sigma} = \\mathbf{F}\\mathbf{S}\\mathbf{F}^{T} = \\mathbf{P}\\mathbf{F}^{T} \\\\ \\mathbf{P} &amp;= \\mathbf{F} \\mathbf{S} = \\mathbf{\\tau} \\mathbf{F}^{-T} = J \\mathbf{\\sigma} \\mathbf{F}^{-T} \\\\ \\mathbf{S} &amp;= \\mathbf{F}^{-1} \\mathbf{P} = \\mathbf{F}^{-1} \\mathbf{\\tau} \\mathbf{F}^{-T} = J \\mathbf{F}^{-1} \\mathbf{\\sigma} \\mathbf{F}^{-T} \\\\ \\mathbf{\\sigma} &amp;= J^{-1} \\mathbf{\\tau} = J^{-1} \\mathbf{P}\\mathbf{F}^{T} = J^{-1} \\mathbf{F} \\mathbf{S} \\mathbf{F}^{T} \\end{aligned} \\] <p>The Cauchy tensor \\(\\mathbf{\\sigma}\\) will be said to be Eulerian (i.e. current configuration), while the second Piola-Kirchhoff tensor \\(\\mathbf{S}\\) will be said to be Lagrangian (i.e. initial configuration). The Piola-Kirchhoff \\(\\mathbf{P}\\) and Kirchhoff \\(\\mathbf{\\tau}\\) tensors, neither Eulerian nor Lagrangian, will be called two-point tensor.</p>"},{"location":"docs/theory/continuum_mechanics/#constitutive_behavior_models_and_the_objectivity_principle","title":"Constitutive behavior models and the objectivity principle","text":"<p>Constitutive behavior models describes the relationship between deformation and the evolution of stresses. We can distinguish three main types of constitutive behavior models:</p> <ul> <li> <p>Hypoelastic: the strain rate is related to a stress rate. These laws are frequently used for materials with a low anisotropic response. They are easy to implement and suitable for updated resolutions. The stresses and strain energies may not be independent of the deformation history;</p> </li> <li> <p>Elastic (or elastic Cauchy): a measure of strain is related to a measure of stress. The stresses are independent of the deformation history while the strain energy may not be. These formulations are very little used in the context of large transformations.</p> </li> <li> <p>Hyperelastic: a strain energy density is defined as a stress potential. The stresses and strain energies are independent of the deformation history.</p> </li> </ul> <p>A constitutive behavior model must verify the principle of material indifference or objectivity, i.e. it must be invariant in any change of reference frame. Indeed, the objectivity translates the independence of these quantities from the chosen observer. It is therefore necessary to define and work with objective quantities. It is thus necessary to distinguish among the previously introduced quantities those which are objective<sup>1</sup>:</p> <ul> <li> <p>Any tensor written in the reference configuration \\(C_0\\) (such the Green-Lagrange deformation tensor \\(\\mathbf{E}\\) and the second Piola-Kirchhoff stress tensor \\(\\mathbf{S}\\)).</p> </li> <li> <p>Any time derivative of a tensor defined in the reference configuration \\(C_0\\) (like \\(\\dot{\\mathbf{E}}\\) and \\(\\dot{\\mathbf{S}}\\)).</p> </li> <li> <p>Any scalar.</p> </li> </ul> <p>However, it is important to note that:</p> <ul> <li> <p>The time derivatives of the quantities defined in the current deformed configuration \\(C_t\\) are not objective. Thus, the derivative of the Cauchy stress tensor \\(\\dot{\\mathbf{\\sigma}}\\) is not objective.</p> </li> <li> <p>The time derivatives \\(\\dot{\\mathbf{F}}\\) of the transformation gradient and \\(\\dot{\\mathbf{P}}\\) of the first Piola-Kirchhoff stress tensor are also not objective.</p> </li> </ul> <p>However, several objective time derivatives exist, such as the Jaumann stress rate,</p> \\[ \\mathbf{\\sigma}^{\\bigtriangledown} = \\dot{\\mathbf{\\sigma}} + \\mathbf{\\sigma} \\mathbf{\\omega} - \\mathbf{\\omega}\\mathbf{\\sigma} \\] <p>or the Green-Naghdi stress rate<sup>2</sup>,</p> \\[ \\mathbf{\\sigma}^{\\bigtriangleup} = \\dot{\\mathbf{\\sigma}} + \\mathbf{\\sigma} \\dot{\\mathbf{R}} \\mathbf{R}^T - \\dot{\\mathbf{R}} \\mathbf{R}^T\\mathbf{\\sigma} \\]"},{"location":"docs/theory/continuum_mechanics/#thermodynamics_of_continuous_media","title":"Thermodynamics of continuous media","text":"<p>The thermodynamic laws associated with the mechanics of continuous media is necessary to introduce the coupling between thermal phenomena and mechanical effects. However, even in the absence of any mechanical coupling, the second principle of thermodynamics allows the introduction of the fundamental principle related to dissipation, leading to the fact that the mechanical energy supplied to a system is lost as heat.</p>"},{"location":"docs/theory/continuum_mechanics/#first_principle_of_thermodynamics","title":"First principle of thermodynamics","text":"<p>The first principle of thermodynamics or law of conservation of energy expresses that the total energy variation (i.e. internal energy plus kinetic energy) is equal to the sum of the power of the external forces plus the quantity of heat supplied to the system per unit of time, that is to say:</p> \\[ \\frac{d}{dt}\\left( E_{int} + E_{cin} \\right) = P_{ext} + \\dot Q \\] <p>with the internal energy of the system \\(E_{int}\\) is a function of the specific energy \\(e\\),</p> \\[ E_{int} = \\int_\\Omega \\rho e dv \\] <p>the kinetic energy,</p> \\[ E_{cin} = \\frac{1}{2} \\int_\\Omega \\rho \\mathbf{v} \\cdot \\mathbf{v}  dv \\] <p>the external power,</p> \\[ P_{ext} = \\int_\\Omega \\mathbf{f}_{v} \\cdot \\mathbf{v} dv + \\int_{\\partial\\Omega} \\mathbf{t} \\cdot \\mathbf{v}  ds \\] <p>the heat rate supplied to the system:</p> \\[ Q = \\int_\\Omega r dv - \\int_{\\partial\\Omega}  \\mathbf{q} \\cdot \\mathbf{n}  ds \\] <p>Taking into account the definition of each energy term, the first principle of thermodynamics becomes :</p> \\[  \\frac{d}{dt} \\int_\\Omega{\\rho \\left( e + \\frac{1}{2} \\mathbf{v} \\cdot \\mathbf{v} \\right) \\,dv}  = \\int_\\Omega \\left( \\mathbf{f}_{v} \\cdot \\mathbf{v} + r \\right) dv + \\int_{\\partial\\Omega} \\left( \\mathbf{t} \\cdot \\mathbf{v} - \\mathbf{q} \\cdot \\mathbf{n} \\right)  ds \\] <p>Or, using the balance of mechanical energy,</p> \\[ \\begin{align} P_{ext} &amp;= P_{a} - P_{int} \\\\ P_{ext} &amp;= \\int_\\Omega \\rho \\mathbf{\\gamma} \\cdot \\mathbf{v} dv  - \\int_\\Omega \\rho \\mathbf{\\sigma} : \\mathbf{D} dv \\end{align} \\] <p>The nex form of the first principle is given by:</p> \\[  \\int_\\Omega{\\frac{d}{dt}\\rho e \\,dv}  = \\int_\\Omega  {\\mathbf{\\sigma} : \\mathbf{D} \\;dv}  + \\int_\\Omega{\\left( r - \\mathrm{div} \\mathbf{q} \\right)\\, dv} \\] <p>where the divergence theorem has been applied to \\(Q\\) and the Reynolds transport theorem to left hand side <sup>1</sup>. This equation is verified for any point on \\(\\Omega\\) domain considered. Thus, the local Eulerian form is:</p> \\[ \\frac{d}{dt} \\rho e = \\mathbf{\\sigma} : \\mathbf{D}  + r - \\mathrm{div} \\mathbf{q} \\]"},{"location":"docs/theory/continuum_mechanics/#second_principle_of_thermodynamics","title":"Second principle of thermodynamics","text":"<p>The second principle of thermodynamics involves two new variables: the temperature \\({T}(\\mathbf{x},t)\\) and the entropy \\(S\\). The entropy expresses a variation of internal energy associated with a variation of the temperature, its definition in function of the specific entropy \\(\\eta\\) is given by:</p> \\[ S = \\int_\\Omega \\rho \\, \\eta \\, dv \\] <p>The second principle of thermodynamics translates the non-conservation of entropy in an irreversible (non-dissipative) framework. It postulates that the rate of entropy production is always greater than or equal to the rate of heat received divided by the temperature:</p> \\[ \\begin{aligned} \\frac{dS}{dt} &amp;\\ge \\frac{{\\dot Q}}{T}\\\\ \\int_\\Omega \\rho \\, \\dot{\\eta} \\, dv &amp;\\ge \\int_\\Omega \\frac{r}{T} dv - \\int_{\\partial\\Omega}  \\frac{\\mathbf{q}\\cdot \\mathbf{n}  }{T} ds \\end{aligned} \\] <p>using the divergence theorem,</p> \\[ \\int_\\Omega   \\left( \\rho \\dot{\\eta }  + \\mathrm{div}\\left( \\frac{\\underline q}{T} \\right) - \\frac{r}{T} \\right) dv \\ge 0 \\] <p>This hold for any point in \\(\\Omega\\), therefore the local form is given by:</p> \\[   \\rho \\dot{\\eta }  + \\mathrm{div}\\left( \\frac{\\underline q}{T} \\right) - \\frac{r}{T}  \\ge 0 \\] <p>By replacing the volume energy sources \\(r\\) with the first principle and noticing that :</p> \\[ \\mathrm{div}\\left( \\frac{\\underline q}{T} \\right) = \\frac{1}{T}\\mathrm{div}(\\mathbf{q}) - \\frac{1}{T ^2}\\mathbf{q} \\cdot \\frac{\\partial T}{\\partial \\mathbf{x}} \\] <p>The first and second principles define the dissipation function \\(\\Phi\\). This potential can be divided into two parts, the intrinsic dissipation \\(\\Phi_{int}\\) (i.e. internal production of entropy) and the thermal dissipation by conduction \\(\\Phi_{th}\\) :</p> \\[ \\Phi  = \\underbrace {\\rho \\left( {{T} \\,\\dot \\eta  - \\frac{d}{dt}e} \\right) + \\mathbf{ \\sigma } :\\mathbf{D}}_{\\Phi _{\\mathrm int}} - \\underbrace {\\frac{1}{T}\\mathbf{q} \\cdot \\frac{\\partial T}{{\\partial \\underline X }}}_{\\Phi _{\\mathrm{th}}} \\ge 0 \\] <p>Finally by introducing the notion of specific free energy \\(\\psi = e - T \\eta\\), we obtain the local form of the second principle known as the Clausius-Duheim inequality, in its Eulerian form:</p> \\[ \\Phi =-\\rho \\left(\\dot{\\psi} - \\dot{{T} }\\,\\eta  \\right)+\\mathbf{\\sigma}:\\mathbf{D}-\\frac{1}{T}\\mathbf{q} \\cdot \\frac{\\partial T }{\\partial \\mathbf{X}}\\ge 0 \\] <p>or Lagrangian:</p> \\[ \\Phi_{0}=-{{\\rho }_{0}}\\left( \\dot{\\psi }-\\dot{{T} }\\,\\eta  \\right)+\\mathbf{{S}}:\\mathbf{{{\\dot{E}}}}-\\frac{1}{T} \\mathbf{q} \\cdot \\frac{\\partial {T} }{\\partial \\mathbf{X}} \\ge 0 \\]"},{"location":"docs/theory/continuum_mechanics/#state_variables_and_thermodynamic_potentials","title":"State variables and thermodynamic potentials","text":"<p>The thermodynamic state of a medium for a given point and at a fixed time is completely defined by the knowledge of a certain number of scalar and tensor variables, the state variables. The evolution of a system can then be considered as a succession of equilibrium states corresponding to the different points of the medium <sup>1</sup>. These state or thermodynamic variables can be observable or internal.</p> <p>The observable variables (i.e. deformation, temperature) as its name indicates can be directly measured and fully describe the evolution of reversible phenomena, this is the case for elastic phenomena.</p> <p>The internal variables are involved when considering a dissipative phenomenon, which depends not only on the current state but also on the history of transformation undergone by the material. These variables do not appear directly in the equations of motion and therefore are not directly measurable. But from a physical point of view, they allow to give a macroscopic characterization of the microscopic state of the material (e.g. dislocations, crystallization, cracks). The choice of these variables, their type and number, requires a deep knowledge of the physical meaning of the problem and conditions the accuracy of the modeling of the phenomenon.</p>"},{"location":"docs/theory/continuum_mechanics/#rational_thermodynamics","title":"Rational thermodynamics","text":"<p>In the general case, a law of behavior should provide: the free energy of the system \\(\\Phi\\), the specific entropy \\(\\eta\\), the stress tensor \\(\\mathbf{{sigma}}\\) and the heat flux vector \\(\\mathbf{q}\\) as a function of the state variables. The physical content of the theory results from the list of available state variables. Thermodynamics is then used to restrict the possible laws of behavior and to keep only those which are compatible with the second principle of thermodynamics, i.e. compatible with the Clausius-Duheim inequality.</p> <p>The rational thermodynamics method consists in assuming the existence of a thermodynamic potential as a function of a certain number of well-defined state variables (observables or internal). Generally we postulate the existence and the form of the free energy \\(\\Phi\\). The equations of state of the system are then deduced from the Clausius-Duheim inequality and from the application of certain hypotheses specific to the physical phenomenon (e.g.: an isothermal \\(T =const\\) and homogeneous \\(\\frac{\\partial {T} }{\\partial \\mathbf{x}}=0\\) process).</p>"},{"location":"docs/theory/continuum_mechanics/#thermodynamics_of_irreversible_processes","title":"Thermodynamics of irreversible processes","text":"<p>In the case of an irreversible (dissipative) processes, the Clausius-Duheim inequality will allow us to determine the dissipation function of the system, the associated forces (e.g. stresses) and thermodynamic flows (e.g. deformation rates) and to deduce the equations of evolution of the internal variables. This second method is more physical because its assumptions (nature of state variables and nature of dissipations) are directly related to the mechanisms of the phenomenon.</p> <p>In summary, when one wishes to describe the behavior of a given material on which one has a minimum of physical knowledge, it is preferable to use the method of thermodynamics of irreversible processes which is more restrictive than rational thermodynamics. Otherwise the rational thermodynamics will be used to give a general structure without referring to a particular material.</p>"},{"location":"docs/theory/continuum_mechanics/#hyperelastic_constitutive_models","title":"Hyperelastic constitutive models","text":""},{"location":"docs/theory/continuum_mechanics/#generalities","title":"Generalities","text":"<p>The Clausius-Duhem inequality is the basis for the definition of hyperelastic laws of behavior. These laws differ from elastic models and hypoelastic laws which have no thermodynamic basis.</p> <p>In \"pure mechanical\" framework, it is common to ignore thermal effects, in other words to consider the temperature to be homogeneous and the transformation isothermal. The dissipations are then written :</p> \\[ \\begin{align} \\Phi_{0} &amp; = -\\rho_0 \\dot{\\psi} + \\mathbf{S}:\\mathbf{\\dot{E}} \\\\ \\Phi &amp; = -\\rho \\dot{\\psi} + \\mathbf{\\sigma}:\\mathbf{D} \\end{align} \\] <p>A hyperelastic material is a material whose strain energy per unit of initial volume \\(w\\) depends only on the current state of deformation and is non-dissipative, i.e which produce locally no entropy (\\(\\Phi = 0\\)).</p> \\[ \\begin{align} w\\left( \\mathbf{F} \\right) &amp; = \\rho_0 \\psi \\\\ \\Phi_{0} &amp; = 0 \\\\ \\end{align} \\] <p>The strain-energy potential \\(w\\) is admissible only if it satisfies the following conditions :</p> <ul> <li>\\(w\\) it is zero when the material is not subjected to any stress:</li> </ul> \\[w\\left(\\mathbf{I}\\right) = 0 \\] <ul> <li>\\(w\\) increase with deformation</li> </ul> \\[w\\left(\\mathbf{F}\\right) \\geq 0 \\] <ul> <li>\\(w\\) respects the principle of material indifference</li> </ul> \\[ w\\left(\\mathbf{F} \\right) = w\\left(\\mathbf{Q}\\mathbf{F} \\right) \\,   \\forall\\mathbf{F}, \\mathrm{det} \\mathbf{F}  \\geq 0 \\] <ul> <li>\\(w\\) respects the material symmetries.</li> </ul> <p>Using the polar decomposition definition we can shows that the strain-energy potential depends only on the stretching part of \\(\\mathbf{F}\\) <sup>3</sup>:</p> \\[ w\\left(\\mathbf{F} \\right) = w\\left(\\mathbf{R^T}\\mathbf{F} \\right) = w\\left(\\mathbf{R}^T\\mathbf{R}\\mathbf{U} \\right) =w\\left(\\mathbf{U} \\right) \\] <p>Therefore that the strain-energy remains objective if it is expressed as a function of the right Cauchy-Green tensor or the Green-Lagrange tensor:</p> \\[ w\\left(\\mathbf{F} \\right) = w\\left(\\mathbf{C} \\right) = w\\left(\\mathbf{E} \\right) \\] <p>Using the right Cauchy-Green tensor, we then deduce the basic relations of hyperelastic constitutive models:</p> \\[ \\begin{aligned} \\dot{w} &amp; = \\mathbf{S}:\\mathbf{\\dot{E}} \\\\ \\dot{w} \\left( \\mathbf{C} \\right) &amp; =\\mathbf{S}:\\frac{1}{2} \\frac{\\partial }{\\partial t} \\left(\\mathbf{C} - \\mathbf{I} \\right) \\\\ \\frac{\\partial w}{\\partial \\mathbf{C}}:\\frac{\\partial \\mathbf{C}}{\\partial t} &amp; = \\frac{1}{2}\\mathbf{S}:\\frac{\\partial \\mathbf{C}}{\\partial t} \\\\ \\therefore \\frac{\\partial w}{\\partial \\mathbf{C}} &amp; =\\frac{1}{2}\\mathbf{S}  \\\\ \\mathbf{S}&amp;=2 \\frac{\\partial w}{\\partial \\mathbf{C}} \\end{aligned} \\] <p>The previous expression is the general form of the hyperelastic behavior models. It only requires the definition of the strain-energy potential \\(w\\) related to the mechanical behavior of the material.</p>"},{"location":"docs/theory/continuum_mechanics/#isotropic_hyperelasticity","title":"Isotropic hyperelasticity","text":"<p>An hyperelastic material is isotropic relative to the reference configuration if the strain-energy :</p> \\[ w\\left(\\mathbf{C} \\right) = w\\left(\\mathbf{Q}\\mathbf{C}\\mathbf{Q}^T \\right) \\] <p>holds for all the orthogonal tensors \\(\\mathbf{Q}\\). In particular, \\(w\\) can expressed as a function of three invariants of the Right Cauchy-Green tensor:</p> \\[ \\begin{align} w\\left(\\mathbf{C} \\right) &amp; = w\\left(I_1 ,I_2 ,I_3  \\right) \\\\ I_1 &amp; = \\mathrm{tr}  \\left( \\mathbf{C} \\right) \\\\ I_2 &amp; =  \\dfrac{1}{2} \\left( \\mathrm{tr} \\left( \\mathbf{C} \\right)^2 - \\mathrm{tr} \\left( \\mathbf{C}^2 \\right)\\right)\\\\ I_3 &amp; =  \\mathrm{det} \\left( \\mathbf{C} \\right) \\end{align} \\] <p>The potential can also be expressed as a function of stretching values, that is:</p> \\[ \\begin{align} w\\left(\\mathbf{C} \\right) &amp; = w\\left(\\lambda_1 ,\\lambda_2 ,\\lambda_3  \\right) \\\\ I_1 &amp; = \\lambda_1^2 +  \\lambda_2^2 + \\lambda_3^2 \\\\ I_2 &amp; = \\lambda_1^2 \\lambda_2^2 +  \\lambda_1^2 \\lambda_3^2+ \\lambda_2^2 \\lambda_3^2\\\\ I_3 &amp; =  \\lambda_1^2 \\lambda_2^2 \\lambda_3^2 \\end{align} \\] <p>Several invariant expressions of the potential exist for isotropic hyperelastic materials, the most widespread have been proposed by Mooney <sup>4</sup>, Ogden <sup>5</sup> and Rivlin <sup>6</sup>.</p> <p>Using the classical invariant representation, the Second Piola-Kirchhoff stress tensor is given by:</p> \\[ \\mathbf{S} = 2 \\frac{\\partial w}{\\partial \\mathbf{C}} = 2 \\sum_{a=1}^3  \\frac{\\partial w}{\\partial I_i} \\frac{\\partial I_i}{\\partial \\mathbf{C}} \\] <p>The derivatives of the invariants with respect to \\(\\mathbf{C}\\) are given by:</p> \\[ \\begin{align} \\frac{\\partial I_1}{\\partial \\mathbf{C}} &amp; = \\mathbf{I} \\\\ \\frac{\\partial I_2}{\\partial \\mathbf{C}} &amp; = I_1\\mathbf{I} - \\mathbf{C} \\\\ \\frac{\\partial I_3}{\\partial \\mathbf{C}} &amp; = I_3\\mathbf{C}^{-1} \\end{align} \\]"},{"location":"docs/theory/continuum_mechanics/#transverse_isotropic_hyperelasticity","title":"Transverse isotropic hyperelasticity","text":"<p>A transverse isotropic material is characterized by a preferred direction \\(\\mathbf{l}_1\\) in its initial configuration. This type of material has rotational symmetry about this direction, and therefore the response of the material is also invariant to any arbitrary rotation about this axis. In this case, the strain energy potential can be expressed in terms of five independent scalars defined from the right-hand Cauchy-Green tensor. The common representation of this potential (see for example <sup>7</sup>) is as follows:</p> \\[ w = w \\left( I_{1},I_{2},I_{3},I_{4},I_{5}\\right) \\] <p>Where \\(I_{1},I_{2},I_{3}\\) correspond to the classical right Cauchy-Green invariants. Whereas, \\(I_{4},I_{5}\\) are pseudo-invariants associated with the principal direction by <sup>7</sup> <sup>8</sup> <sup>9</sup> <sup>10</sup>:</p> \\[ \\begin{aligned} I_4 \\left(\\mathbf{C},\\mathbf{l}_1  \\right) &amp; = \\mathbf{l}_1 \\cdot \\mathbf{C} \\mathbf{l}_1 = \\mathbf{C}:\\mathbf{L}_{11} \\\\ I_5 \\left(\\mathbf{C},\\mathbf{l}_1  \\right) &amp; = \\mathbf{l}_1 \\cdot \\mathbf{C}^2 \\mathbf{l}_1 = \\mathbf{C}^2:\\mathbf{L}_{11} \\end{aligned} \\] <p>where \\(\\mathbf{L}_{11}\\) is the structural tensor defined by :</p> \\[ \\mathbf{L}_{11}  = \\mathbf{l}_1 \\otimes \\mathbf{l}_1 \\] <p>Ising this invariant definition, the Second Piola-Kirchhoff stress tensor is given by:</p> \\[ \\mathbf{S} = 2 \\frac{\\partial w}{\\partial \\mathbf{C}} = 2 \\sum_{a=1}^5  \\frac{\\partial w}{\\partial I_i} \\frac{\\partial I_i}{\\partial \\mathbf{C}} \\] <p>The derivatives of the pseudo-invariants with respect to \\(\\mathbf{C}\\) are given by:</p> \\[ \\begin{aligned} \\frac{\\partial I_4}{\\partial \\mathbf{C}} &amp; = \\mathbf{L}_{11} \\\\ \\frac{\\partial I_5}{\\partial \\mathbf{C}} &amp; = \\mathbf{l}_1 \\otimes  \\mathbf{C}\\mathbf{l}_1 +  \\mathbf{C}\\mathbf{l}_1 \\otimes \\mathbf{l}_1 \\\\ \\end{aligned} \\]"},{"location":"docs/theory/continuum_mechanics/#orthotropic_hyperelasticity","title":"Orthotropic hyperelasticity","text":"<p>An orthotropic material is defined, in the initial configuration, by three preferred directions \\(\\mathbf{l_1}\\), \\(\\mathbf{l_2}\\) and \\(\\mathbf{l_3}\\) (unit base vector). These directions allow to define the structural tensors <sup>8</sup> :</p> \\[ \\mathbf{L}_{ij}  = \\mathbf{l}_i \\otimes \\mathbf{l}_j \\] <p>The representation theorem allows us to postule the strain energy density as a function of the twelve invariants for an orthotropic behavior <sup>9</sup> <sup>10</sup> :</p> \\[ w =w \\left( I_{1},I_{2},I_{3},I_{41},I_{42},I_{43},I_{412},I_{413},I_{423},I_{51},I_{52},I_{53} \\right) \\] <p>Defined by:</p> \\[ \\begin{aligned} I_{4i} &amp; = \\mathbf{l}_i \\cdot \\mathbf{C} \\mathbf{l}_i = \\mathbf{C}:\\mathbf{L}_{ii} \\\\ I_{4ij} &amp; = \\mathbf{l}_i \\cdot \\mathbf{C} \\mathbf{l}_j = \\mathbf{C}:\\mathbf{L}_{ij} \\\\ I_{5i} &amp; = \\mathbf{l}_i \\cdot \\mathbf{C}^2 \\mathbf{l}_i = \\mathbf{C}^2:\\mathbf{L}_{ii} \\end{aligned} \\] \\[ \\mathbf{S} = 2 \\frac{\\partial w}{\\partial \\mathbf{C}} = 2 \\sum_{i=1}^3  \\left( \\frac{\\partial w}{\\partial I_i} \\frac{\\partial I_i}{\\partial \\mathbf{C}} +  \\frac{\\partial w}{\\partial I_{4i}} \\frac{\\partial I_{4i}}{\\partial \\mathbf{C}} + \\frac{\\partial w}{\\partial I_{5i}} \\frac{\\partial I_{5i}}{\\partial \\mathbf{C}} \\right) + 2 \\sum_{i,j=1}^3  \\left(  \\frac{\\partial w}{\\partial I_{4ij}} \\frac{\\partial I_{4ij}}{\\partial \\mathbf{C}}  \\right) \\] <p>the derivate are given by:</p> \\[ \\begin{aligned} \\frac{\\partial I_{4i}}{\\partial \\mathbf{C}} &amp; = \\mathbf{L}_{ii}  \\\\ \\frac{\\partial I_{4ij}}{\\partial \\mathbf{C}} &amp; = \\frac{1}{2} \\left( \\mathbf{l}_i \\otimes \\mathbf{l}_j +  \\mathbf{l}_j \\otimes \\mathbf{l}_i \\right) \\\\ \\frac{\\partial I_{5i}}{\\partial \\mathbf{C}} &amp; = \\mathbf{l}_i \\otimes  \\mathbf{C}\\mathbf{l}_i +  \\mathbf{C}\\mathbf{l}_i \\otimes \\mathbf{l}_i \\end{aligned} \\]"},{"location":"docs/theory/continuum_mechanics/#references","title":"References","text":"<ol> <li> <p>Lemaitre, J. &amp; Chaboche, J.-L. Mechanics of Solid Materials. (Cambridge University Press, 1990).\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>Bonet, J. &amp; Wood, R. D. Nonlinear continuum mechanics for finite element analysis. (Cambridge University Press, 1997).\u00a0\u21a9</p> </li> <li> <p>Ciarlet, P. G. Mathematical Elasticity: Three-Dimensional Elasticity. vol. 1 (Society for Industrial and Applied Mathematics, 2021).\u00a0\u21a9</p> </li> <li> <p>Mooney, M. A Theory of Large Elastic Deformation. Journal of Applied Physics 11, 582--592 (1940).\u00a0\u21a9</p> </li> <li> <p>Ogden, R. W. Non-linear Elastic Deformations. (Dover Publications, 1997).\u00a0\u21a9</p> </li> <li> <p>Rivlin, R. S. Large Elastic Deformations of Isotropic Materials. IV. Further Developments of the General Theory. Philosophical Transactions of the Royal Society of London. Series A, Mathematical and Physical Sciences 241, 379--397 (1948).\u00a0\u21a9</p> </li> <li> <p>Spencer, A. J. M. Constitutive Theory for Strongly Anisotropic Solids. in Continuum Theory of the Mechanics of Fibre-Reinforced Composites (ed. Spencer, A. J. M.) 1--32 (Springer, 1984).\u00a0\u21a9\u21a9</p> </li> <li> <p>Boehler, J. P. Introduction to the Invariant Formulation of Anisotropic Constitutive Equations. in Applications of Tensor Functions in Solid Mechanics (ed. Boehler, J. P.) 13--30 (Springer, 1987).\u00a0\u21a9\u21a9</p> </li> <li> <p>Quanshui, Z. &amp; Boehler, J. P. Tensor function representations as applied to formulating constitutive laws for clinotropic materials. Acta Mech. Sin. 10, 336--348 (1994).\u00a0\u21a9\u21a9</p> </li> <li> <p>Itskov, M. &amp; Aksel, N. A class of orthotropic and transversely isotropic hyperelastic constitutive models based on a polyconvex strain energy function. International Journal of Solids and Structures 41, 3833--3848 (2004).\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"docs/theory/theory_overview/","title":"Overview","text":"<p>In this section you will find the some details about the physical models and method behind Comfor. For further details, the reader is advised to refer to the articles cited in each section.</p>"},{"location":"docs/theory/theory_overview/#contents","title":"Contents","text":"<ul> <li>Materials</li> <li>Elements</li> <li>Solvers</li> </ul>"},{"location":"docs/theory/theory_overview/#notation","title":"Notation","text":"<p>Following the common usage in the finite element and continuum mechanics literature we adopt the following rules.</p> <p>Variables notation</p> Notation Description \\(\\alpha,\\beta,\\gamma, ...\\) Lower greek case letters for Scalars \\(\\mathbf{a},\\mathbf{b},\\mathbf{c},...\\) Lowercase bold face letters for vectors \\(\\mathbf{A},\\mathbf{B},\\mathbf{C},...\\) Uppercase bold face letters for second-order tensors \\(\\mathcal{A},\\mathcal{B},\\mathcal{C},...\\) Uppercase bold face calligraphic letters for third-order tensors \\(\\mathbb{A},\\mathbb{B},\\mathbb{C},...\\) Uppercase blackboard letters for fourth-order tensors <p>Index notation</p> <p>The components of tensors are written with subscripted, regular face : \\(A_{ij}, e_i\\) ...</p> <p>We adopt the Einstein summation convention, where indices that are repeated exactly twice are summed over the appropriate range is used, unless otherwise specified. For example:</p> \\[     \\mathbf{u} = u_i\\mathbf{e}_i  = \\sum_{n=1}^{3} u_i\\mathbf{e}_i=   u_1\\mathbf{e}_1 +  u_2\\mathbf{e}_2 +u_3\\mathbf{e}_3 \\] <p>Voigt notation</p> <p>Second order tensor are mapped into colum vectors according to the following convention.</p> \\[     A =     \\begin{pmatrix}     a_{11} &amp; a_{12} &amp; a_{13} \\\\     a_{21}&amp; a_{22} &amp; a_{23} \\\\     a_{31}&amp; a_{32} &amp; a_{33}     \\end{pmatrix}     =     \\begin{Bmatrix}     a_{11}  \\\\     a_{22}  \\\\     a_{33}  \\\\     a_{23}  \\\\     a_{13}  \\\\     a_{12}     \\end{Bmatrix} \\] <p>The two dimensional version is obtained dy deleting the appropriated components.</p> <p>Linear Algebra</p> Notation Description \\(\\mathbf{a}\\cdot\\mathbf{b}\\) Dot product of the vectors \\(\\mathbf{a}\\) and \\(\\mathbf{b}\\) \\(\\mathbf{a}\\otimes\\mathbf{b}\\) Tensor (or Dyadic) product of the vectors \\(\\mathbf{a}\\) and \\(\\mathbf{b}\\) \\(\\mathbf{a}\\times\\mathbf{b}\\) Vectorial product of the vectors \\(\\mathbf{a}\\) and \\(\\mathbf{b}\\) \\(\\mathbf{A}:\\mathbf{B}\\) Double contracted product of the two tensors \\(\\mathbf{A}\\) and \\(\\mathbf{B}\\) \\(\\mathbf{A}^{T}\\) Transpose of a matrix or a vector. \\(\\dot \\square\\) Time derivative of quantity \\(\\square\\) \\(\\ddot \\square\\) Second order time derivative of quantity \\(\\square\\) \\(\\mathsf{tr}\\,\\square\\) Trace of a matrix or a tensor \\(\\square\\) (\\(\\mathsf{tr}\\,\\mathbf{A}=\\sum\\mathbf{A}_{ii}\\)) \\(\\delta_{ij}\\) Kronecker delta identity \\(\\mathbf{I}\\) Unity matrix or second order tensor \\(\\mathbb{I}\\) Unity fourth order tensor <p>Continuum mechanics</p> Notation Description \\(t_0\\) Time at initial configuration \\(t\\) Current time \\(\\Omega\\) Arbitrary region \\(\\partial\\Omega\\) Boundary surface of \\(\\Omega\\) \\(\\mathbf{X}\\) Material coordinates at initial time \\(\\mathbf{x}\\) Material coordinates at current time \\(\\mathbf{F}\\) Deformation gradient tensor \\(\\mathbf{C}\\) Right Cauchy-Green tensor \\(\\mathbf{R}\\) Rotation tensor \\(\\mathbf{U}\\) Stretch tensor \\(\\mathbf{L}\\) Velocity gradient tensor \\(\\mathbf{D}\\) Rate of deformation tensor \\(\\mathbf{\\omega}\\) Spin tensor \\(\\mathbf{E}\\) Green-Lagrange deformation tensor \\(\\mathbf{S}\\) First Piola-Kirchoff stress tensor \\(\\mathbf{S}\\) Second Piola-Kirchoff stress tensor \\(\\mathbf{\\sigma}\\) Cauchy stress tensor \\(\\mathbf{\\sigma}^{\\bigtriangledown}\\) Jauman stress rate \\(\\mathbf{\\sigma}^{\\bigtriangleup}\\) Green-Naghdi stress rate \\(\\mathbb{C}\\) Material elasticity tensor \\(\\mathbb{f}_v\\) Volume density force \\(\\mathbb{t}\\) Surface density forces <p>Finite element analysis</p> Notation Description \\(\\Delta t^n\\) n-th time step \\(\\mathbf{M}\\) Mass matrix \\(\\mathbf{C}^{d}\\) Damping matrix \\(\\mathbf{f}_{int}\\) Vector of internal forces \\(\\mathbf{f}_{ext}\\) Vector of the external force \\(\\mathbf{u}\\) Vector of nodal displacements \\(\\mathbf{v} = \\dot{\\mathbf{u}}\\) Vector of nodal velocities \\(\\mathbf{a} = \\ddot{\\mathbf{u}}\\) Vector of nodal accelerations"},{"location":"docs/theory/materials/composite_materials/","title":"Composite Materials","text":"<p>A composite material is an assembly of two or more immiscible constituents whose properties meet specific needs not met individually by the basic components. This definition includes a wide range of materials, some natural and long used such as wood, bone or cob, and others more recently developed such as tires or reinforced concrete. All these materials have in common the fact that they are composed of two components: the reinforcement that gives the final product its dominant mechanical characteristics and the matrix that provides the cohesion of the whole. The will to use specific materials for each application, with the aim of optimizing costs and mechanical performance, makes composites a serious candidate.</p> <p>The matrices of currently developed composite materials are generally classified into two categories:</p> <ul> <li> <p>Organic matrices (thermoplastic polymers, thermosets and elastomers). They represent the vast majority of matrices used industrially because of their low cost and ease of implementation.</p> </li> <li> <p>Mineral matrices (ceramic and metallic). Ceramic and metallic matrices are intended for advanced applications. They are used when environmental conditions do not allow the use of an organic matrix (high temperatures, unfavorable hygrometry).</p> </li> </ul> <p>Reinforcements can be classified according to their geometry:</p> <ul> <li> <p>Particulate reinforcements: the matrix is reinforced by a dispersed phase of particles with or without preferred orientation. These are generally granular (chalk), lamellar (talc, mica) or acicular (wallastonite, short fibres) inclusions. Composites with particulate reinforcement are rarely used for structural purposes, but rather for specific applications or for consumer products.</p> </li> <li> <p>Staple fiber reinforcements: the matrix is reinforced by a dispersed phase of short fibers (lengths less than 100 times their diameter) with or without a preferred orientation. The short fibers are assembled in layers called strands and represent a volume contribution in fiber of about 30%. The composite obtained is then a reinforced polymer.</p> </li> <li> <p>Continuous fiber reinforcements: the matrix is reinforced by a dispersed phase of continuous fibers whose length is close to that of the final part. The preferred directions of the fibers give the final part its main mechanical characteristics. In this type of reinforcement, the matrix is only present to ensure the cohesion of the whole and to bring a resistance to the efforts applied in directions different from those of the fibres.</p> </li> </ul> <p>Comfor allows to model at this moment only Continuous fiber reinforcements.</p>"},{"location":"docs/theory/materials/composite_materials/#continuous_fiber_and_organic_matrix_composites","title":"Continuous fiber and organic matrix composites","text":"<p>Continuous fiber and organic matrix composites are widely used in industry, particularly in the military sector<sup>1</sup>, aeronautics or in shipbuilding<sup>2</sup> <sup>3</sup>. Since a few years, the automotive sector also shows a growing interest for these materials in order to reduce the mass of the vehicles<sup>4</sup> <sup>5</sup>.</p>"},{"location":"docs/theory/materials/composite_materials/#the_reinforcement","title":"The reinforcement","text":"<p>Depending on the purpose of the fiber, several types of compositions can be used as raw material. Fibers must be produced and then assembled into yarns that will be linked by weaving according to different patterns, the reinforcement is thus obtained.</p> <p>The architecture of the reinforcement weave can be 2D (surface), 2.5D (interlocks) or 3D (three-dimensional). The first one corresponds to an interlacing of wicks according to two directions, the warp and the weft. The type of arrangement used is called reinforcement weave and is the traditional textile used in industry. For 3D weaves, a third sliver direction is added in the thickness of the reinforcement. Finally, the so-called 2.5D weaves are located at the border of the 2D and 3D reinforcements. Yarns will then seek in the upper and lower layers one or more weft rovings in order to link the layers together.</p> <p>Depending on the manufacturing process, the addition of the matrix takes place before the forming step, like the thermoforming process, or after, this is the case of LCM (Liquid Composite Moulding) processes.</p> <p>For 2D fabrics, there are three main weaves:</p> <ul> <li> <p>Cloth or taffeta, the simplest weave: each warp thread passes alternately above and below each weft thread.</p> </li> <li> <p>Twill NxM : the weft thread passes over N and then under M warp threads, shifting one thread at each pass.</p> </li> <li> <p>Satin: the binding points of the warp and weft are scattered in order to reduce the diagonal effect present on the twill. The weft thread passes over N warp threads and then under 1.</p> </li> </ul> Taffeta Twill Satin <p>The combination of these three families of textile weaves and materials results in a wide variety of woven reinforcements. If the reinforcement is identical in the warp and weft direction, it is called a balanced fabric. Generally speaking, a fabric can be characterized by its crimp, the relative arrangement of the warps and wefts. The latter is defined by the ratio of the length of the fabric in one direction to the length of a yarn in that same direction. Different studies <sup>6</sup> <sup>7</sup> <sup>8</sup> <sup>9</sup> have been able to show the fundamental influence of crimp on the mechanical behavior of the reinforcements. The crimp factor is given by:</p> \\[ e = \\frac{l_{\\text{yarn}}-l_{\\text{weave}}}{l_\\text{yarn}} \\] <p>Thick parts can be made with these 2D fabrics by superimposing them. The structure thus obtained allows to optimize the stiffness of the finished material by acting on the orientation of the plies. However, in this configuration, the final structure is subject to delamination.</p> <p>In the case of 3D and 2.5D woven fabrics, the weft rovings cross several planes of warp rovings in the thickness of the material. The resulting woven fabric can then reach thicknesses of about ten centimeters and avoid delamination <sup>10</sup>:</p> Example of 3D fabrics"},{"location":"docs/theory/materials/composite_materials/#the_matrix","title":"The matrix","text":"<p>Organic (synthetic) matrices are polymer resins. These materials are composed of a series of repeating units called monomers, which join together in a chemical reaction known as polymerization to form macromolecular chains. The most commonly used polymers for composite material matrices belong to the family of thermosets and thermoplastics.</p>"},{"location":"docs/theory/materials/composite_materials/#thermosets","title":"Thermosets","text":"<p>Thermosetting polymer resins are composed of cross-linked or three-dimensional macromolecular chains. Before heat treatment, the resin is in a liquid or past-like state at room temperature, which facilitates its handling and impregnation of the fibers.</p> <p>After undergoing a heating cycle known as a polymerization cycle or cross-linking cycle, the resin becomes irreversibly solid. Thus, thermoset composite parts can be shaped only once since the matrix becomes infusible and insoluble after polymerization.</p> <p>Thermoset resins are the most widely used in industry and have good mechanical properties and strength.</p>"},{"location":"docs/theory/materials/composite_materials/#thermoplastics","title":"Thermoplastics","text":"<p>Thermoplastic matrices are composed of linear or one-dimensional chains and branched or two-dimensional chains. Unlike thermosetting resins, the material is usually in a solid state at room temperature. Under the influence of heat, the polymer can be softened and then melted and deformed, but can be returned to its original solid state by cooling without any chemical change (under certain conditions, e.g. oxidation). The transformation process is reversible and, therefore, the material and the manufactured parts can be potentially recycled.</p> <p>Compared to thermoset matrices, thermoplastic matrix composites have many advantages:</p> <ul> <li>Equal or superior mechanical properties.</li> <li>Shorter forming cycle.</li> <li>Greater ease of storage.</li> <li>Reversibility and recycling.</li> </ul> <p>The industrial development of thermoplastic matrix composite structures is now in full swing. This manuscript is part of the numerous works that are being developed to industrialize the manufacturing of such products.</p>"},{"location":"docs/theory/materials/composite_materials/#prepregs","title":"Prepregs","text":"<p>Prepregs are the result of the combination of the reinforcement and a thermoplastic or thermoset polymer already joined together before forming.</p> <p>As mentioned previously, one of the advantages of thermosets is the good impregnation of fibers due to its low viscosity at room temperature; whereas thermoplastics must be heated above the melting temperature and require a long compaction phase in order to properly impregnate the fibers. This step affects the forming cycle by increasing the consolidation time, necessary to remove porosities by compaction.</p>"},{"location":"docs/theory/materials/composite_materials/#manufacturing_processes","title":"Manufacturing processes","text":"<p>The manufacturing processes of composite materials are numerous and varied. From essentially manual processes, techniques have not stopped evolving to meet the growing use of these materials. The need for higher and higher production rates, or for parts with better controlled and optimized characteristics, have led to different types of processes which are chosen according to the need (shape, production rate, series, mechanical characteristics, etc.). The forming operations described below are based on the principle of molding, a process that allows obtaining structures with non-developable geometry.</p> <p>As mentioned previously, depending on the manufacturing process, the addition of the matrix takes place before or after the deformation of the reinforcement. The main processes used in each case will be briefly described below. A more detailed explanation will be given for the process targeted in this work: thermoforming.</p>"},{"location":"docs/theory/materials/composite_materials/#liquid_composite_moulding","title":"Liquid Composite Moulding","text":"<p>The LCM (Liquid Composite Moulding) processes are used to shape woven and polymer matrix composites. Among these processes, vacuum infusion and RTM (Resin Transfer Moulding, <sup>11</sup>) are the most used. The principle of these processes is to mold the dry reinforcement, then to inject the resin to solidify the part. The fact of molding the dry reinforcement makes it possible to obtain a final composite part very close to the desired part, and thus to minimize the machining steps and thus the costs. These processes, known as \"closed mould processes\", allow a strict control of volatile organic compounds emitted during the manufacturing process, as the resin is not in direct contact with the atmosphere.</p>"},{"location":"docs/theory/materials/composite_materials/#vacuum_infusion","title":"Vacuum infusion","text":"<p>In vacuum infusion, the dry woven reinforcement is placed between a mold and a waterproof membrane. By evacuating this area, the pump will press the reinforcement against the mold through the membrane and start the resin flow. A drainage net, made of a porous material, is placed near the reinforcement in order to facilitate the distribution of the resin. This process is easier to implement than RTM, and allows the production of parts in large series with good repeatability on complex shapes. However, thickness control is difficult and the surface finish on the membrane side is generally worse than the molded side.</p> Vacuum infusion"},{"location":"docs/theory/materials/composite_materials/#resin_transfer_moulding","title":"Resin transfer moulding","text":"<p>The manufacturing process can be broken down into three steps. The first step is the preforming step. It consists in shaping (or stamping) a woven reinforcement in a mold by means of a punch. The advantage of this process is to have two rigid parts which will allow to better control the compression of the reinforcement during the shaping and thus its final thickness. Contrary to vacuum infusion, the surface finish is good on both sides. In order to avoid wrinkles during the stamping process, blank holders can be used by adding a slight tension in the rovings.</p> <p>Once the reinforcement is molded into the desired shape, the resin is injected. The assembly is then heated to cure the resin. Finally, when the resin is consolidated, the mold is opened and the part demolded.</p> <p>This process is undergoing a strong development with the objective of being used for mass production parts because it allows a control of the volume rate of fiber, a good surface finish, the creation of complex geometries and sustained and automated production rates. However, despite its use in industry, this process is not fully controlled for complex shapes (non-developable for example) or large sizes. These elements lead aerospace and automotive industries to take a great interest in the development and research associated with the process.</p> RTM Process"},{"location":"docs/theory/materials/composite_materials/#thermoforming","title":"Thermoforming","text":"<p>In order to exploit the excellent properties of CFRTP composites in an industrial context, different manufacturing processes have been developed depending on the product and its application. Most of these methods are an adaptation of the processes for the shaping of thermoset composites or of the classical stamping techniques. In the case of forming flat structures, roll forming and simple compression have already been mentioned. In the case of constant section structures, we can mention pultrusion forming, which is a continuous manufacturing process where the profile is obtained by pulling the prepreg reinforcement through a heated die, or filament winding forming <sup>12</sup>. These processes allow the shaping of simple parts (1D and 2D) and are easily automated.</p> Thermoplastic filament winding production line <p>In order to manufacture structures with non-developable (3D) geometry, thermoforming appears to be an ideal candidate.</p> <p>The term \"thermoforming\" encompasses a variety of manufacturing processes ranging from molding by applying pressure or vacuum to a flexible diaphragm, to hydroforming or thermostamping. However, the operating principle is essentially the same. A plate consisting of one or more initially flat prepreg layers is heated and then shaped by applying pressure. The plate can be pre-consolidated, which ensures a good degree of consolidation after shaping with less production time. In the following, the thermoforming process by deep drawing or thermostamping will be described.</p> <p>Thermoforming is a very interesting solution for the mass production of composite structures. Indeed, being an adaptation of the shaping of metal sheets by stamping, there is the possibility of reusing the already existing equipment as well as its automation system <sup>13</sup>.</p> <p>The first step in thermoforming is to heat the material above its melting temperature. The main methods used for preheating are infrared (IR) lamps, convection ovens, and heated platen presses. IR heating is the most popular. The heating time is very short (1 to 2 minutes). However, temperature gradients in the thickness can appear which are managed by imposing a progressive heating (preheating cycle). A second constraint associated with this method is the poor temperature distribution in the case of complex geometries. In the case of thin structures, IR heating is well suited. On the other hand, convection heating is slow (5-10 min) but a homogeneous temperature distribution is obtained in the thickness at the end of heating. Finally, conduction heating is rarely used, because the material tends to stick to the heating plates.</p> <p>After heating, the material is transported to the press. The transfer time is a critical parameter. The material must be transported to the press as quickly as possible to prevent the material from cooling above its crystallization temperature. Today's automation systems such as conveyors and robots help to reduce this time. The temperature loss in this step is about 10%. This is usually compensated by overheating the material in the first step. The material is then shaped.</p> <p>During forming, the reinforcement is deformed by applying pressure between two complementary tools which are the impression of the final structure, the punch and the die. These tools are usually equipped with a system to maintain a constant temperature below the melting point. The forming process takes a few seconds. The part is then maintained under pressure to remove porosities and ensure cohesion between the different layers and cooled down to a temperature that allows the dimensional stability of the part. This is the consolidation phase. The structure is finally demolded and continues to cool in ambient air. </p> <p>All the steps are carried out in a few minutes, this time can be further reduced if the production line allows the manufacture of two parts at the same time, one on the heating module and one on the shaping module. All these characteristics make thermostamping a prime candidate for the mass production of composite parts, especially in the automotive sector.</p> <p>However, the optimal automation of the process implies that the physical phenomena involved are mastered. Double curvature structures present different types of defects that are difficult to predict. In order to avoid the \"trial and error\" method, numerical modeling is a beneficial step.</p> <p>It is clear that temperature is an essential factor since it modifies the behavior of the resin. The mechanical properties and particular deformation mechanisms of the material, due to the fibrous nature of the reinforcement, are constantly evolving.</p> Thermo-stamping steps Thermo-stamping chain"},{"location":"docs/theory/materials/composite_materials/#modeling_and_simulation_approaches","title":"Modeling and Simulation approaches.","text":"<p>Modeling and numerical simulation of the forming process are two important steps to predict the feasibility of different parts, but also to understand and improve the process itself. As mentioned earlier, the quality of the resulting parts depends greatly on the settings of the parameters that control the forming operations. Thus, during the design of a product, it is necessary to call upon trial and error campaigns, which are all the more costly as the part is complex and of large dimensions. The objective of the simulation is to predict the geometrical and mechanical characteristics likely to appear during the shaping process such as</p> <ul> <li> <p>the position of the strands and fibers after deformation</p> </li> <li> <p>the mechanical characteristics of the deformed reinforcement</p> </li> <li> <p>the possible appearance of folding, unweaving, fiber breakage</p> </li> </ul> <p>The simulation also allows to determine the ideal conditions in order to optimize both the process and the quality of the structure (temperature, forming speed, initial size and geometry of the reinforcement, etc.).</p> <p>These characteristics and defects are not all defined at the same scale: a fiber break is a microscopic phenomenon difficult to detect when the scale of observation is macroscopic, as well as a wrinkle (macroscopic phenomenon) cannot be detected at the microscopic scale. Therefore, different types of simulations have been developed, each one being placed at a precise scale of the reinforcement:</p> <ul> <li> <p>The microscopic scale: study of the fibers and their interactions. Only a few hundred fibers per strand can be simulated at most</p> </li> <li> <p>The mesoscopic scale: study of the behavior of the sliver in order to determine the local characteristics of the reinforcement. The simulated volumes are generally of the order of the elementary mesh of the reinforcement</p> </li> <li> <p>The macroscopic scale: study of the deformation of the reinforcement as a whole, in order to characterize the appearance of folds, slippage of the strands and more generally the formability of a complex geometry part.</p> </li> </ul>"},{"location":"docs/theory/materials/composite_materials/#modeling_at_the_microscopic_scale","title":"Modeling at the microscopic scale","text":"<p>In a microscopic scale approach, the basic component is the fiber. The behavior of the fiber is linear orthotropic and its characteristic quantities are relatively well known. The difficulty of this type of approach is the management of the numerous bodies constituting the model, especially in the management of the contact between them.</p> <p>Currently, the existing models that come closest to modeling the behavior of reinforcements at the microscopic scale are those performed on ropes or cables, which are similar to strands containing fewer fibers and strongly twisted <sup>14</sup> <sup>15</sup> <sup>16</sup> <sup>17</sup>. On the other hand, the application to reinforcement rovings is rarer <sup>18</sup>, mainly because of the high number of fibers per roving. However, we can mention the weaving model developed by Zhou <sup>19</sup> and Durville <sup>20</sup>.</p> <p>The main limitation of this type of approach is the computational time inherent to the number of fibers to model. For this reason, groups of fibers are modeled in the wicks, reducing the number of virtual fibers to a few tens instead of thousands of real fibers. Therefore, the simulation of the shaping of a large part with this approach is not feasible in the current state of research.</p> Zhou model Durville model"},{"location":"docs/theory/materials/composite_materials/#mesoscopic_simulation","title":"Mesoscopic simulation","text":"<p>Models at the mesoscopic scale are interested in the behavior of an elementary mesh of the reinforcement. At this scale, the wick is considered as a continuous medium. The objective of these models is to determine certain behaviors or properties of the reinforcement that are difficult or expensive to determine experimentally. Among these properties, the most sought after are :</p> <ul> <li> <p>the macroscopic mechanical behavior of the reinforcement, allowing in particular to feed the models at the macroscopic scale.</p> </li> <li> <p>the local permeability of the reinforcement as a function of the deformation of the elementary mesh <sup>68</sup>, allowing to feed simulations of the resin flow in the reinforcement in the case of LCM type processes.</p> </li> <li> <p>The macroscopic thermal properties of the material (with or without taking into account the matrix) for the simulation of thermal exchanges, such as the macroscopic thermal conductivity <sup>69</sup> <sup>70</sup> <sup>71</sup>.</p> </li> </ul> <p>Analytical approaches have been developed to access these thermomechanical and geometrical quantities. These approaches are generally based on a simplification of the wick geometry in the elementary mesh and on assumptions of mechanical or thermal behavior.</p> <p>The next figures shows an example using this type of approach proposed by Kawabata <sup>21</sup>. The roving is described by a set of segments schematizing its mean line: these segments then form a set of elastic tensile bars representing the whole woven reinforcement. The interactions between the rovings at the crossing points are modeled by springs of different types.</p> Structure to model Analytical modelling <p>Analytical approaches provide consistent results in determining the mechanical behavior of wicks in tension, but are more limited in more complex applications where shear is involved, for example. Simplifying assumptions about the geometry, especially at the level of lateral contacts, are problematic.</p> <p>Faced with these limitations, the use of finite elements seems a good alternative. Their use at this scale requires two prerequisites: the geometry and the boundary conditions of the reinforcement. The geometry must be obtained theoretically from the characteristics of the wick and the armor, or experimentally.</p> <p>Many models have been developed to obtain the final geometry. We note the models associated with the software WiseTex developed at the Katholieke Universiteit Leuven <sup>22</sup> and Texgen developed at the University of Nottingham <sup>23</sup>. In the case of WiseTex, the geometry of the reinforcement is obtained by minimizing the strain energy of the strands within the reinforcement by taking into account different mechanical contributions (tension, bending, torsion, compression of the strands and interactions). This approach requires the experimental identification of data that are difficult to obtain. The models made with Texgen , unlike WiseTex, do not use mechanical considerations. However, it allows to easily realize elementary meshes of 2D and 3D woven fabrics in which the wicks can have variable non-symmetric sections along their mean line. For both approaches, the problem of interpenetration, although reduced under WiseTex <sup>24</sup>, remains major.</p> Structure to model Analytical modelling <p>X-ray microtomography is the most promising method to experimentally access the geometry of an elementary mesh <sup>25</sup> <sup>26</sup> <sup>27</sup>. This technique consists in scanning a representative sample of a reinforcement in order to obtain a 3D cartography and then to process the images obtained by cutting the constituent elements (the strands), separating them from each other and meshing them. Microtomography has the great advantage of being able to lead to interpenetration-free modeling if the appropriate digital treatments are performed <sup>28</sup> <sup>29</sup>. </p> 3D tomography of an interlock Mesh part <p>Once the geometry is defined and discretized by finite elements, it is necessary to associate a behavior law to the wicks, which are in most cases considered as a continuous medium. This behavior is very specific due to the fibrous nature of the fibers. Most studies use hypoelastic <sup>30</sup> or hyperelastic <sup>31</sup> models to describe this behavior.</p> <p>At this scale, modeling the entire woven reinforcement during forming is still difficult. However, the study of an elementary pattern or cell representative of the structure (CER) will allow to understand the behavior of the weaving at a smaller scale before extending it to the whole part. This is the case of modeling by homogenization and multi-scale calculations <sup>32</sup>.</p>"},{"location":"docs/theory/materials/composite_materials/#macroscale_modeling","title":"Macroscale modeling","text":"<p>The objective of macroscale simulation is to simulate the shaping of woven reinforcements at the scale of the entire part. The study of formability consists in predicting the appearance of the various defects observable on the woven fabrics. The number of defects that can be obtained depends both on the type of modeling approach chosen and on the richness of the mechanical characteristics given to them. These characteristics can be derived from tests performed at the woven fabric scale or from observations/simulations at smaller, microscopic and mesoscopic scales. The reuse of results obtained at smaller scales is the main reason for the existence of the corresponding models. Among the known macroscopic approaches, there are geometrical and mechanical approaches.</p>"},{"location":"docs/theory/materials/composite_materials/#geometrical_approaches","title":"Geometrical approaches","text":"<p>Geometric approaches are based on the so-called fishnet algorithm. This so-called geometric or kinematic approach is mainly used for the simulation of dragging. Its simplicity of use and its speed of execution make it a good method of first approach <sup>33</sup> <sup>34</sup>. It is based on strong assumptions:</p> <ul> <li> <p>The inextensibility of the rovings ;</p> </li> <li> <p>The non-slip between warp and weft;</p> </li> <li> <p>The free rotation at the crossing points between networks;</p> </li> <li> <p>The absence of slippage between the woven fabric and the shaping tools.</p> </li> </ul> <p>In this approach, the reinforcement is similar to hinged bars at the crossing points between networks. The algorithm determines the position of a curant point C from the intersection of the two geodesics drawn on the surface to be draped from the related points A and B. The position of the initial point is thus made paramount and influences the final result <sup>35</sup>.</p> Geometrical approach <p>With the removal of all mechanical and weaving considerations, the results are identical whatever the stiffness of the rovings and the weave chosen. Kinematic blocking in shear and thickness variation in compression are also absent from the basic model. The absence of developed contact prevents the use of external tools such as blanket clamps, which are necessary for some shaping. For woven reinforcements, the net algorithm is interesting as a preliminary approach to determine the degree of complexity of forming a part. An example of application on a non-developable part is given in the next figure.</p> Geometrical part Simulation"},{"location":"docs/theory/materials/composite_materials/#mechanical_approaches","title":"Mechanical approaches","text":"<p>Among the mechanical models, three types of approaches can be distinguished: discrete, semi-discrete or continuous.</p> <p>The discrete approaches consist in considering the textile as a discontinuous assembly of deformable elements <sup>36</sup>. They are generally extensions of the net theory, i.e. the introduction of mechanical characteristics in the solution of the shaping problem. The reinforcement is modeled by nodes connected by bars and springs with the aim of modeling the response in elongation, shear, torsion and bending. The work of Sze and Liu <sup>37</sup> is particularly interesting on the variety of solicitations modeled for 2D dry reinforcements, as illustrated in the following figure. These approaches, generally encountered for clothing fabrics, are abandoned in favor of semi-discrete or continuous methods in the case of technical fabrics.</p> Sze Discret approach <p>The application of this type of approach in the case of thermoplastic prepreg composites results in the modification of the mechanical behavior of the discrete elements that compose the reinforcement, in order to take into account the contribution of the matrix. We note the model proposed by Skordos <sup>38</sup> based on the work of Sharma <sup>39</sup>, which introduces nonlinear elastoviscoplastic elements in order to take into account the specific behaviors of prepregs, such as the dependence on the strain rate.</p> Meshing Simulation <p>The continuous approaches make the assumption of a continuous material at the macroscopic scale. This assumption follows directly from the consideration of non-slip between rovings during the shaping phase. The consideration of the textile as a continuous anisotropic medium whose behavior is homogenized from lower scales is then possible. The modeling is focused on an adapted proposal of behavior laws.</p> <p>Different approaches, either hypoelastic <sup>40</sup> <sup>41</sup> <sup>42</sup> or hyperelastic <sup>43</sup>, have given good results. These laws are associated with shell or plate elements for thin woven fabrics, and with bricks for thick woven fabrics. These methods have the advantage that they can be easily used in commercial finite element codes. Their main disadvantage comes from the homogenization that is performed. The same material is applied at all points of the fibrous reinforcement to be modeled and does not take into account the variations of the mechanical characteristics inherent to the weave studied.</p> Khan continuous approach <p>Most of the proposed continuous models for the shaping of prepreg composites are based on the so-called IFRM (ideal fiber reinforced model) assumptions. IFRM was originally proposed by Spencer for purely elastic responses <sup>44</sup> and adapted by Rogers <sup>45</sup> and Johnson <sup>46</sup> to the viscoelastic behavior of unidirectional and bidirectional prepregs. Two important assumptions are made in this type of model: the incompressibility of the material and the inextensibility of the fibers. Therefore, the only deformation mode considered is in-plane shear. This can be seen as the rotation of the rovings around the crossing points of the warp-weft networks (lattice effect).</p> <p>In the case of woven reinforcements, the stress state is given by the following relationship <sup>47</sup>:</p> \\[ \\begin{split} \\mathbf{ \\sigma }  =  &amp;- p\\mathbf{ I}  + {T_A}\\mathbf{ A}  + {T_B}\\mathbf{ B} \\\\   &amp;+ 2{\\eta _{\\mathrm{1}}}\\mathbf{ D}  + 2{\\eta _{\\mathrm{2}}}\\left( {\\mathbf{ A} {\\kern 1pt} \\mathbf{ D}  + \\mathbf{ D} {\\kern 1pt} \\mathbf{ A}  + \\mathbf{ B} {\\kern 1pt} \\mathbf{ D}  + \\mathbf{ D} {\\kern 1pt} \\mathbf{ B} } \\right) + 2{\\eta _3}\\left( {{\\mathrm{tr}}\\mathbf{ C} {\\kern 1pt} \\mathbf{ D} } \\right)\\left( {\\mathbf{ C}  + {{\\mathbf{ C} }^T}} \\right) \\end{split} \\] <p>\\(\\mathbf{{A}}  = \\mathbf{a}\\otimes \\mathbf{a}\\), \\(\\mathbf{{B}}  = \\mathbf{b}\\otimes \\mathbf{b}\\) and \\(\\mathbf{{C}}  = \\mathbf{a}\\otimes \\mathbf{b}\\), \\(\\mathbf{a}\\) et \\(\\mathbf{b}\\) being the directions of the fibers in the warp and weft direction respectively.</p> <p>The first term of the previous relation represents an arbitrary hydrostatic pressure induced by the assumption of incompressibility of the material, similarly, \\(T_A\\) and \\(T_B\\) are arbitrary stresses in the direction of the fibers resulting from the inextensibility stress. The scalars \\(\\eta_\\mathrm{1}\\) , \\(\\eta_\\mathrm{2}\\) and \\(\\eta_\\mathrm{3}\\) can be interpreted as the viscosity parameters of the material, possibly as a function of the strain rate tensor \\(\\mathbf{{D}}\\) (non-linear viscosity). The identification of these parameters from experimental tests, either in the one-dimensional case <sup>48</sup> <sup>49</sup> <sup>50</sup> <sup>51</sup> or in the two-dimensional case <sup>52</sup> <sup>53</sup> <sup>54</sup>, has been the subject of much work. However, difficulties have been encountered mainly due to the fact that \\(\\eta_\\mathrm{1}\\) , \\(\\eta_\\mathrm{2}\\) and \\(\\eta_\\mathrm{3}\\) are not associated with simple shear mechanisms. In order to correctly represent the different flows associated with the main deformation modes of the tissue, different modifications have been proposed <sup>55</sup>.</p> <p>The models developed under IFRM principles give very interesting analytical results in the case of simple deformations. However, the constraint associated with the non-extensibility of the fibers makes its implementation by finite elements difficult because of the arbitrary tensions. This last point has motivated the development of various models in order to make the implementation more suitable for the simulation of thermoforming of complex parts by finite elements <sup>56</sup> <sup>57</sup> <sup>58</sup> <sup>59</sup> <sup>60</sup> <sup>61</sup> <sup>62</sup>.</p> <p>The semi-discrete approaches are a combination of the two approaches mentioned above. One part of the behavior is modeled with a continuous solid while another part is modeled with discrete inputs. One can then distinguish two philosophies in the interaction between discrete and continuous parts.</p> <p>In the first case, the discrete and continuous parts are associated in the same Lagrangian element. The forces generated by any deformation are subdivided between a tension contribution associated with the discrete parts and the other contributions (shear, compression) associated with the continuous part. The discrete and continuous parts are fixed with respect to each other in the isoparametric configuration. In this case, the discrete part is only the elementary representation of an energy contribution of tension. Different models have been developed, dedicated to 2D fabrics using shell elements <sup>63</sup> <sup>64</sup> <sup>65</sup>, but also to interlocks using solid elements (hexahedral) <sup>66</sup>. The interest of such an element is to be able to represent more accurately and simply the local directions of the wicks in the preform and to account for the complex anisotropy of these materials.</p> Semi-discrete finite element Simulation <p>Another modeling strategy considers discrete and continuous parts as totally independent. This is the case, for example, of work on NCFs <sup>67</sup>. These specific woven fabrics are made of sewn webs. In this modeling, the roving plies are represented by layers of solid elements while bar elements are added to represent the seams. Here, the continuous parts are totally decoupled from the discrete parts, implying the management of the contact between the webs and the seams.</p> Creech NCF semi-discrete model"},{"location":"docs/theory/materials/composite_materials/#references","title":"References","text":"<ol> <li> <p>Bhatnagar, A. Lightweight Ballistic Composites: Military and Law-Enforcement Applications. (Woodhead Publishing, 2016).\u00a0\u21a9</p> </li> <li> <p>Smith, C. S. Design of Marine Structures in Composite Materials. (Elsevier, 1990).\u00a0\u21a9</p> </li> <li> <p>Mouritz, A., Gellert, E., Burchill, P. &amp; Challis, K. Review of advanced composite structures for naval ships and submarines. Composite structures 53, 21--42 (2001).\u00a0\u21a9</p> </li> <li> <p>Verrey, J., Wakeman, M. D., Michaud, V. &amp; M\u00e5nson, J.-A. E. Manufacturing cost comparison of thermoplastic and thermoset RTM for an automotive floor pan. Composites Part A: Applied Science and Manufacturing 37, 9--22 (2006).\u00a0\u21a9</p> </li> <li> <p>Fuchs, E. R. H., Field, F. R., Roth, R. &amp; Kirchain, R. E. Strategic materials selection in the automobile body: Economic opportunities for polymer composite design. Composites Science and Technology 68, 1989--2002 (2008).\u00a0\u21a9</p> </li> <li> <p>Buet-Gautier, K. &amp; Boisse, P. Experimental analysis and modeling of biaxial mechanical behavior of woven composite reinforcements. Experimental Mechanics 41, 260--269 (2001).\u00a0\u21a9</p> </li> <li> <p>Boisse, P., Gasser, A. &amp; Hivet, G. Analyses of fabric tensile behaviour: Determination of the biaxial tension--strain surfaces and their use in forming simulations. Composites Part A: Applied Science and Manufacturing 32, 1395--1414 (2001).\u00a0\u21a9</p> </li> <li> <p>Lomov, S., Verpoest, I. &amp; Robitaille, F. Manufacturing and internal geometry of textiles. in Design and Manufacture of Textile Composites (ed. Long, A. C.) 1--61 (Woodhead Publishing, 2005).\u00a0\u21a9</p> </li> <li> <p>Hivet, G. &amp; Boisse, P. Consistent mesoscopic mechanical behaviour model for woven composite reinforcements in biaxial tension. Composites Part B: Engineering 39, 345--361 (2008).\u00a0\u21a9</p> </li> <li> <p>Gu, H. &amp; Zhili, Z. Tensile behavior of 3D woven composites by using different fabric structures. Materials\\ &amp; Design 23, 671--674 (2002).\u00a0\u21a9</p> </li> <li> <p>Potter, K. D. The early history of the resin transfer moulding process for aerospace applications. Composites Part A: Applied Science and Manufacturing 30, 619--621 (1999).\u00a0\u21a9</p> </li> <li> <p>Mack, J. &amp; Schledjewski, R. Filament winding process in thermoplastics. in Manufacturing Techniques for Polymer Matrix Composites (PMCs) (eds. Advani, S. G. &amp; Hsiao, K.-T.) 182--208 (Woodhead Publishing, 2012).\u00a0\u21a9</p> </li> <li> <p>Campbell, F. C. Structural Composite Materials. (ASM International, 2010).\u00a0\u21a9</p> </li> <li> <p>Jiang, W. G., Yao, M. S. &amp; Walton, J. M. A concise finite element model for simle straight wire rope strand. International Journal of Mechanical Sciences 41, 143--161 (1999).\u00a0\u21a9</p> </li> <li> <p>Nawrocki, A. &amp; Labrosse, M. A finite element model for simple straight wire rope strands. Computers and Structures 77, 345--359 (2000).\u00a0\u21a9</p> </li> <li> <p>Sreprateep, K. &amp; Bohez, E. L. J. Computer aided modeling of fiber assemblies. Computer Aided Design\\ &amp; Applications 3, 367--376 (2006).\u00a0\u21a9</p> </li> <li> <p>Ghoreishi, S. R., Cartraud, P., Davies, P. &amp; Messager, T. Analytical modeling of synthetic fiber ropes subjected to axial loads. Part I: A new continuum model for multilayered fibrous structures. International Journal of Solids and Structures 44, 2924--2942 (2007).\u00a0\u21a9</p> </li> <li> <p>Latil, P., Org\u00e9as, L., Geindreau, C., Dumont, P. J. J. &amp; Rolland du Roscoat, S. Towards the 3D in situ characterisation of deformation micro-mechanisms within a compressed bundle of fibres. Composites Science and Technology 71, 480--488 (2011).\u00a0\u21a9</p> </li> <li> <p>Zhou, G., Sun, X. &amp; Wang, Y. Multi-chain digital element analysis in textile mechanics. Composites Science and Technology 64, 239--244 (2004).\u00a0\u21a9</p> </li> <li> <p>Durville, D. Simulation of the mechanical behaviour of woven fabrics at the scale of fibers. International Journal of Material Forming 3, 1241--1251 (2010).\u00a0\u21a9</p> </li> <li> <p>Kawabata, S., Niwa, M. &amp; Kawai, H. The finite-deformation theory of plain-weave fabrics. Part II: The uniaxial-deformation theory. The Journal of The Textile Institute 64, 47--61 (1973).\u00a0\u21a9</p> </li> <li> <p>Lomov, S. V., Gusakov, A. V., Huysmans, G., Prodromou, A. &amp; Verpoest, I. Textile geometry preprocessor for meso-mechanical models of woven composites. Composites Science and Technology 60, 2083--2095 (2000).\u00a0\u21a9</p> </li> <li> <p>Sherburn, M. Geometric and mechanical modelling of textiles. (University of Nottingham, 2007).\u00a0\u21a9</p> </li> <li> <p>Verpoest, I. &amp; Lomov, S. V. Virtual textile composites software Wisetex: Integration with micro-mechanical and permeability and structural analysis. Composites Science and Technology 65, 2563--2574 (2005).\u00a0\u21a9</p> </li> <li> <p>Desplentere, F. et al. Micro-CT characterization of variability in 3D textile architecture. Composites Science and Technology 65, 1920--1930 (2005).\u00a0\u21a9</p> </li> <li> <p>Hsieh, J. Computed Tomography: Principles, Design, Artifacts, and Recent Advances. (Society of Photo-Optical Instrumentation Engineers (SPIE), 2015).\u00a0\u21a9</p> </li> <li> <p>Herman, G. T. Fundamentals of Computerized Tomography: Image Reconstruction from Projections. (Springer, 2009).\u00a0\u21a9</p> </li> <li> <p>Naouar, N., Vidal-Sall\u00e9, E., Schneider, J., Maire, E. &amp; Boisse, P. Meso-scale FE analyses of textile composite reinforcement deformation based on X-Ray computed tomography. Composite Structures 116, 165--176 (2014).\u00a0\u21a9</p> </li> <li> <p>Naouar, N., Vidal-Sall\u00e9, E., Schneider, J., Maire, E. &amp; Boisse, P. 3D composite reinforcement meso F.E. Analyses based on X-Ray computed tomography. Composite Structures 132, 1094--1104 (2015).\u00a0\u21a9</p> </li> <li> <p>Gasser, A., Boisse, P. &amp; Hanklar, S. Mechanical behaviour of dry fabric reinforcements. 3D simulations versus biaxial tests. Computational Materials Science 17, 7--20 (2000).\u00a0\u21a9</p> </li> <li> <p>Charmetant, A., Vidal-Sall\u00e9, E. &amp; Boisse, P. Hyperelastic modelling for mesoscopic analyses of composite reinforcements. Composites Science and Technology 71, 1623--1631 (2011).\u00a0\u21a9</p> </li> <li> <p>Geers, M., Kouznetsova, V. G. &amp; Brekelmans, W. A. M. MultiScale First-Order and Second-Order Computational Homogenization of Microstructures towards Continua. International Journal for Multiscale Computational Engineering 1, 371--386 (2003).\u00a0\u21a9</p> </li> <li> <p>Mack, C. &amp; Taylor, H. M. The Fitting of Woven Cloth to Surfaces. Journal of the Textile Institute Transactions 47, T477--T488 (1956).\u00a0\u21a9</p> </li> <li> <p>Van Der Wee\u00ebn, F. Algorithms for draping fabrics on doubly-curved surfaces. International Journal for Numerical Methods in Engineering 31, 1415--1426 (1991).\u00a0\u21a9</p> </li> <li> <p>Wang, J., Paton, R. &amp; Page, J. R. The draping of woven fabric preforms and prepregs for production of polymer composite components. Composites Part A: Applied Science and Manufacturing 30, 757--765 (1999).\u00a0\u21a9</p> </li> <li> <p>Ben Boubaker, B., Haussy, B. &amp; Ganghoffer, J. F. Discrete models of woven structures. Macroscopic approach. Composites Part B: Engineering 38, 498--505 (2007).\u00a0\u21a9</p> </li> <li> <p>Sze, K. Y. &amp; Liu, X. H. A new skeletal model for fabric drapes. International Journal of Mechanics and Materials in Design 2, 225--243 (2005).\u00a0\u21a9</p> </li> <li> <p>Skordos, A. A., Monroy Aceves, C. &amp; Sutcliffe, M. P. F. A simplified rate dependent model of forming and wrinkling of pre-impregnated woven composites. Composites Part A: Applied Science and Manufacturing 38, 1318--1330 (2007).\u00a0\u21a9</p> </li> <li> <p>Sharma, S. B. &amp; Sutcliffe, M. P. F. A simplified finite element model for draping of woven material. Composites Part A: Applied Science and Manufacturing 35, 637--643 (2004).\u00a0\u21a9</p> </li> <li> <p>Peng, X. Q. &amp; Cao, J. A continuum mechanics-based non-orthogonal constitutive model for woven composite fabrics. Composites Part A: Applied Science and Manufacturing 36, 859--874 (2005).\u00a0\u21a9</p> </li> <li> <p>Badel, P., Vidal-Salle, E., Maire, E. &amp; Boisse, P. Simulation and tomography analysis of textile composite reinforcement deformation at the mesoscopic scale. Deformation and Fracture of Composites: Analytical, Numerical and Experimental Techniques, with regular papers 68, 2433--2440 (2008).\u00a0\u21a9</p> </li> <li> <p>Khan, M. A., Mabrouki, T., Vidal-Sall\u00e9, E. &amp; Boisse, P. Numerical and experimental analyses of woven composite reinforcement forming using a hypoelastic behaviour. Application to the double dome benchmark. Journal of Materials Processing Technology 210, 378--388 (2010).\u00a0\u21a9</p> </li> <li> <p>Charmetant, A., Orliac, J. G., Vidal-Sall\u00e9, E. &amp; Boisse, P. Hyperelastic model for large deformation analyses of 3D interlock composite preforms. Composites Science and Technology 72, 1352--1360 (2012).\u00a0\u21a9</p> </li> <li> <p>Spencer, A. J. M. Constitutive Theory for Strongly Anisotropic Solids. in Continuum Theory of the Mechanics of Fibre-Reinforced Composites (ed. Spencer, A. J. M.) 1--32 (Springer, 1984).\u00a0\u21a9</p> </li> <li> <p>Rogers, T. G. Rheological characterization of anisotropic materials. Composites 20, 21--27 (1989).\u00a0\u21a9</p> </li> <li> <p>Johnson, A. F. Rheological model for the forming of fabric-reinforced thermoplastic sheets. Composites Manufacturing 6, 153--160 (1995).\u00a0\u21a9</p> </li> <li> <p>Spencer, A. J. M. Theory of fabric-reinforced viscous fluids. Composites Part A: Applied Science and Manufacturing 31, 1311--1321 (2000).\u00a0\u21a9</p> </li> <li> <p>Goshawk, J. &amp; Jones, R. Structure reorganization during the rheological characterization of continuous fibre-reinforced composites in plane shear. Composites Part A: Applied Science and Manufacturing 27, 279--286 (1996).\u00a0\u21a9</p> </li> <li> <p>Advani, S. G., Creasy, T. S. &amp; Shuler, S. F. Chapter 8 Rheology of long fiber-reinforced composites in sheetforming. in Composite Materials Series vol. 11 323--369 (Elsevier, 1997).\u00a0\u21a9</p> </li> <li> <p>Christensen, R. Effective viscous flow properties for fiber suspensions under concentrated conditions. Journal of Rheology (1978-present) 37, 103--121 (1993).\u00a0\u21a9</p> </li> <li> <p>Martin, T. A., Bhattacharyya, D. &amp; Collins, I. F. Bending of fibre-reinforced thermoplastic sheets. Composites Manufacturing 6, 177--187 (1995).\u00a0\u21a9</p> </li> <li> <p>O'Bradaigh, C. M. &amp; Byron Pipes, R. Finite element analysis of composite sheet-forming process. Composites Manufacturing 2, 161--170 (1991).\u00a0\u21a9</p> </li> <li> <p>McGuinness, G. B. &amp; \u00d3Br\u00e1daigh, C. M. Development of rheological models for forming flows and picture-frame shear testing of fabric reinforced thermoplastic sheets. Journal of Non-Newtonian Fluid Mechanics 73, 1--28 (1997).\u00a0\u21a9</p> </li> <li> <p>McGuinness, G. B. &amp; \u00d3Br\u00e1daigh, C. M. Characterisation of thermoplastic composite melts in rhombus-shear: The picture-frame experiment. Composites Part A: Applied Science and Manufacturing 29, 115--132 (1998).\u00a0\u21a9</p> </li> <li> <p>Mallon, P. J. &amp; Obradaigh, C. M. Compliant Mold Techniques for Thermoplastic Composites. in Comprehensive Composite Materials (eds. Kelly, A. &amp; Zweben, C.) 873--913 (Pergamon, 2000).\u00a0\u21a9</p> </li> <li> <p>Hsiao, S.-W. &amp; Kikuchi, N. Numerical analysis and optimal design of composite thermoforming process. Computer Methods in Applied Mechanics and Engineering 177, 1--34 (1999).\u00a0\u21a9</p> </li> <li> <p>Cherouat, A. &amp; Billo\u00ebt, J. L. Mechanical and numerical modelling of composite manufacturing processes deep-drawing and laying-up of thin pre-impregnated woven fabrics. Journal of Materials Processing Technology 118, 460--471 (2001).\u00a0\u21a9</p> </li> <li> <p>Ten Thije, R. H. W., Akkerman, R. &amp; Hu\u00e9tink, J. Large deformation simulation of anisotropic material using an updated Lagrangian finite element method. Computer Methods in Applied Mechanics and Engineering 196, 3141--3150 (2007).\u00a0\u21a9</p> </li> <li> <p>Jauffr\u00e8s, D., Morris, C. D., Sherwood, J. A. &amp; Chen, J. Simulation of the thermostamping of woven composites: Determination of the tensile and in-plane shearing behaviors. International Journal of Material Forming 2, 161--164 (2009).\u00a0\u21a9</p> </li> <li> <p>Harrison, P., Clifford, M. J., Long, A. C. &amp; Rudd, C. D. A constituent-based predictive approach to modelling the rheology of viscous textile composites. Composites Part A: Applied Science and Manufacturing 35, 915--931 (2004).\u00a0\u21a9</p> </li> <li> <p>Harrison, P., Yu, W.-R. &amp; Long, A. C. Rate dependent modelling of the forming behaviour of viscous textile composites. Composites Part A: Applied Science and Manufacturing 42, 1719--1726 (2011).\u00a0\u21a9</p> </li> <li> <p>Guzman-Maldonado, E., Hamila, N., Boisse, P. &amp; Bikard, J. Thermomechanical analysis, modelling and simulation of the forming of pre-impregnated thermoplastics composites. Composites Part A: Applied Science and Manufacturing 78, 211--222 (2015).\u00a0\u21a9</p> </li> <li> <p>Hamila, N. &amp; Boisse, P. Simulations of textile composite reinforcement draping using a new semi-discrete three node finite element. Composites Part B: Engineering 39, 999--1010 (2008).\u00a0\u21a9</p> </li> <li> <p>Hamila, N., Boisse, P., Sabourin, F. &amp; Brunet, M. A semi-discrete shell finite element for textile composite reinforcement forming simulation. International Journal for Numerical Methods in Engineering 79, 1443--1466 (2009).\u00a0\u21a9</p> </li> <li> <p>Bel, S., Hamila, N., Boisse, P. &amp; Dumont, F. Finite element model for NCF composite reinforcement preforming: Importance of inter-ply sliding. Composites Part A: Applied Science and Manufacturing 43, 2269--2277 (2012).\u00a0\u21a9</p> </li> <li> <p>De Luycker, E., Morestin, F., Boisse, P. &amp; Marsal, D. Simulation of 3D interlock composite preforming. Composite Structures 88, 615--623 (2009).\u00a0\u21a9</p> </li> <li> <p>Creech, G. &amp; Pickett, A. K. Meso-modelling of Non-Crimp Fabric composites for coupled drape and failure analysis. Journal of Materials Science 41, 6725--6736 (2006).\u00a0\u21a9</p> </li> <li> <p>Loix, F., Badel, P., Org\u00e9as, L., Geindreau, C. &amp; Boisse, P. Woven fabric permeability: From textile deformation to fluid flow mesoscale simulations. Composites Science and Technology 68, 1624--1630 (2008).\u00a0\u21a9</p> </li> <li> <p>Dasgupta, A. &amp; Agarwal, R. K. Orthotropic Thermal Conductivity of Plain-Weave Fabric Composites Using a Homogenization Technique. Journal of Composite Materials 26, 2736--2758 (1992).\u00a0\u21a9</p> </li> <li> <p>Dasgupta, A., Agarwal, R. K. &amp; Bhandarkar, S. M. Three-dimensional modeling of woven-fabric composites for effective thermo-mechanical and thermal properties. Composites Science and Technology 56, 209--223 (1996).\u00a0\u21a9</p> </li> <li> <p>Bigaud, D., Goyh\u00e9n\u00e8che, J.-M. &amp; Hamelin, P. A global-local non-linear modelling of effective thermal conductivity tensor of textile-reinforced composites. Composites Part A: Applied Science and Manufacturing 32, 1443--1453 (2001).\u00a0\u21a9</p> </li> </ol>"},{"location":"docs/theory/materials/materials_overview/","title":"Materials overview","text":"<p>This section concisely describes the mechanical models implemented in Comfor. For a more detailed introduction, the reader is recommended to refer to the following links, as well as to consult the cited papers.</p> <ul> <li>Nonlinear continuum mechanics</li> <li>Composite material introduction</li> </ul>"},{"location":"docs/theory/materials/materials_overview/#comfor_constitutive_models","title":"Comfor constitutive models","text":"<p>Comfor includes the following constitutive models.</p> <ul> <li>Elasticity<ul> <li>Kirchhoff isotropic </li> </ul> </li> <li>Hyper-elasticity     <ul> <li>Ogden</li> <li>Textile elasticity</li> </ul> </li> </ul> <p>The following parameter must be set for all the materials:</p> <p>Necessary parameters</p> <ul> <li><code>material_name</code> is the custom name for the material</li> <li>\\(\\rho\\) the mass density of the material.  </li> </ul> <p>Optional parameters</p> <ul> <li>\\(\\alpha\\) is the mass proportional damping. This factor introduces damping forces caused by the absolute velocities of the model. This parameter is optional.</li> </ul> <p>Example</p> <pre><code>MATERIALS TYPE &lt;material_type_1&gt;\n&lt;material_name&gt; RHO = &lt;mass density&gt; DAMPING = &lt;damping_value&gt; ...\n</code></pre>"},{"location":"docs/theory/materials/materials_overview/#elastic_materials","title":"Elastic materials","text":"<p>In order to model elastic materials with small strain are large rotations we use a Saint-Venant-Kirchoff material model. The general expression is given by:</p> \\[ \\mathbf{S} =  \\mathbb{C} \\mathbf{E} \\] <p>where \\(\\mathbb{C}\\) elastic tensor or elastic moduli. </p>"},{"location":"docs/theory/materials/materials_overview/#isotropic_kirchhoff","title":"Isotropic Kirchhoff","text":"<p>In tha case of an isotropic material the elastic moduli is given simply by :</p> \\[ \\mathbb{C} = \\lambda \\mathbf{I} \\otimes \\mathbf{I} + 2\\mu \\mathbf{I} \\] <p>where \\(\\lambda\\) and \\(\\mu\\) are the Lam\u00e9 constants related to the \\(E\\) Young's modulus and \\(\\nu\\) Poisson's ratio.</p> \\[ \\begin{aligned} \\lambda &amp;=  \\frac{\\nu E}{\\left( 1 + \\nu \\right)\\left( 1 - 2 \\nu \\right)} \\\\  \\mu &amp;= \\frac{E}{2\\left( 1 + \\nu \\right)} \\end{aligned} \\] <p>The stress-strain relation is given simply by:</p> \\[ \\mathbf{S} = \\mathbb{C}:\\mathbf{E} \\] <p>Expected parameters</p> <ul> <li>\\(E\\) : Young's modulus</li> <li>\\(\\nu\\) : Poisson's ratio.</li> </ul> <p>Example</p> <pre><code>MATERIALS TYPE ELASTIC\n&lt;material_name&gt; RHO = &lt;rho&gt; DAMPING = &lt;material_damping&gt; E = &lt;young_modulus&gt; NU = &lt;poissons_ratio&gt;\n</code></pre>"},{"location":"docs/theory/materials/materials_overview/#hyperelastic_materials","title":"Hyperelastic materials","text":"<p>Two families of hyperelastic materials are currently implemented:</p> <ul> <li>Isotropic to model vacuum bags, rubbery like membrane materials ...</li> <li>Anisotropic textiles models.</li> </ul> <p>The general form for the strain-stress relation is given by:</p> \\[ \\mathbf{S} = 2 \\frac{\\partial w}{\\partial \\mathbf{C}}  \\] <p>where \\(w\\) is the strain-energy potential of the material.</p>"},{"location":"docs/theory/materials/materials_overview/#isotropic_hyperelastic_materials","title":"Isotropic hyperelastic materials","text":"<p>Ogden</p> <p>The strain energy potential for this constitutive model is defined by a polynomial series as a function of the principal stretches. </p> \\[ w \\left( \\lambda_1, \\lambda_2, \\lambda_3 \\right) = \\sum_{p=1}^N \\frac{\\mu_p}{\\alpha_p} \\left( \\lambda_1^{\\alpha_p}+ \\lambda_2^{\\alpha_p} + \\lambda_3^{\\alpha_p} - 3 \\right) \\] <p>Where N is a positive integer generally taken equal to 3, and \\(\\mu_p\\) and \\(\\alpha_p\\) are the material parameters to be identified. In the case of hyperelastic membranes, an assumption of incompressibility is generally made. The conservation of volume can be expressed in terms of the principal elongations:</p> \\[ \\lambda_1 \\lambda_2 \\lambda_3 = 1  \\] <p>This allows us to express the thickness evolution as a function of the membrane strains: </p> \\[ \\lambda_3 = \\frac{1}{\\lambda_1 \\lambda_2} = \\frac{h}{h_0} \\] <p>Finally, the stress state expressed in the initial configuration under the assumption of an incompressible material is given by:</p> \\[ \\mathbf{S} = 2 \\frac{\\partial w \\left( \\lambda_1, \\lambda_2, \\lambda_3 \\right) }{\\partial \\mathbf{C}} - p\\mathbf{C}^{-1} \\] <p>With p being the Lagrange multiplier associated with the incompressibility condition of the material (hydrostatic pressure).</p> <p>Expected parameters</p> <ul> <li><code>TYPE</code> : OGDEN</li> <li>\\(\\mu_i\\) : shear moduli constant values.</li> <li>\\(\\alpha_i\\) : constant dimensionless values associated to each \\(\\mu_i\\).</li> </ul> <p>Example</p> <pre><code>MATERIALS TYPE HYPERELASTIC\n&lt;material_name&gt; RHO = &lt;rho&gt; DAMPING = &lt;material_damping&gt; TYPE = OGDEN MU = &lt;mu_1 mu_2 mu_3 mu_n&gt; ALPHA = &lt;alpha_1 alpha_2 alpha_3 alpha_n&gt;\n</code></pre> <p>Note</p> <ul> <li>\\(N\\) is deduced automatically from the number of parameters given in the material entry.</li> <li>The initial thickness \\(h_0\\) is deduced from the element definition </li> </ul> <p>Warning</p> <p>The number of \\(\\mu_p\\) and \\(\\alpha_p\\) parameters must be equal. </p>"},{"location":"docs/theory/materials/materials_overview/#textile_composite_hyperelastic_materials","title":"Textile composite hyperelastic materials","text":"<p>The mechanical behavior of textile composite materials can modelled using a non-linear hyperelastic model<sup>1</sup> <sup>2</sup>. The membrane and bending contributions to the strain energy potential are decoupled given the fibrous nature of one single ply.</p> \\[ w = {w_{mem}} + {w_{ben}} \\] <p>The membrane strain energy is expressed as a function of the physical invariants associated with the different deformation modes of the reinforcement. </p> \\[ \\begin{equation}     w_{mem}\\left( I_{\\lambda_1} ,I_{\\lambda_2} ,I_{\\gamma}  \\right) = w_{\\lambda_1}\\left( I_{\\lambda_1}\\right) + w_{\\lambda_2}\\left(I_{\\lambda_2}\\right) + w_{\\gamma}\\left(I_{\\gamma}\\right) \\end{equation} \\] <p>with:</p> \\[ \\begin{aligned} I_{\\lambda_1} &amp; = \\frac{1}{2}\\ln\\left( I_{41} \\right) =   \\ln \\left( {\\lambda_1} \\right) \\\\ I_{\\lambda_2} &amp; = \\frac{1}{2}\\ln\\left( I_{42} \\right) =   \\ln \\left( {\\lambda_2} \\right) \\\\ I_{\\gamma} &amp;= \\frac{I _{412}}{\\sqrt{I _{41}  I _{42}}} = \\sin\\left( \\gamma \\right)  \\end{aligned} \\] <p>\\(I_{4i}=\\mathbf{C}:\\mathbf{L}_{ii}\\) and \\(I_{4ij} = \\mathbf{C}:\\mathbf{L}_{ij}\\) and \\(\\mathbf{L}_{ij} = \\mathbf{l}_i \\otimes \\mathbf{l}_j\\) the structural tensor defined from the initial material warp \\(\\mathbf{l}_1\\) and weft \\(\\mathbf{l}_2\\) directions. </p> <p>The Piola-Kirchhoff II stress tensor is given by:</p> \\[ \\begin{aligned}     \\mathbf{S} &amp;= \\frac{1}{2} \\frac{\\partial w_{mem}}{\\partial \\mathbf{C}} \\\\     &amp;=  \\frac{1}{2} \\frac{\\partial w_{\\lambda_1}}{\\partial I_{\\lambda_1} } \\frac{\\partial I_{\\lambda_1}}{\\partial \\mathbf{C}} + \\frac{1}{2} \\frac{\\partial w_{\\lambda_2}}{\\partial I_{\\lambda_2} } \\frac{\\partial I_{\\lambda_2}}{\\partial \\mathbf{C}} + \\frac{1}{2} \\frac{\\partial w_{\\gamma}}{\\partial I_{\\gamma} } \\frac{\\partial I_{\\gamma}}{\\partial \\mathbf{C}} \\\\     &amp;= \\mathbf{S}_{\\lambda_1} + \\mathbf{S}_{\\lambda_2} + \\mathbf{S}_{\\gamma} \\end{aligned} \\] <p>Therefore, we only needs to define the strain-potential for each contribution. By default Comfor assumes that each potential can be represented by a polynomial function of the form:</p> \\[ w_p  = \\sum_{i=1}^{n}  {k_{i}^p (I_{p} )^{2i}}  \\] <p>Expected parameters</p> <ul> <li><code>warp_ori</code>: initial warp orientation defined by the components <code>l1_x, l1_y, l1_z</code> in the global base.</li> <li><code>weft_ori</code>: initial weft orientation defined by the components <code>l2_x, l2_y, l2_z</code> in the global base.</li> <li><code>kelongwarp</code>: warp elongation strain-potential defined by the \\(n\\) coefficients \\(k_1^{\\lambda_1},k_2^{\\lambda_1} ... k_n^{\\lambda_1}\\).</li> <li><code>kelongweft</code>: weft elongation strain-potential defined by the \\(n\\) coefficients \\(k_1^{\\lambda_2},k_2^{\\lambda_2} ... k_n^{\\lambda_2}\\).</li> <li><code>kshear</code>: in-plane shear strain-potential defined by the \\(n\\) coefficients \\(k_1^{\\gamma},k_2^{\\gamma} ... k_n^{\\gamma}\\).</li> </ul> <p>Example</p> <pre><code>MATERIALS TYPE HYPERTEXTILE\n&lt;material_name&gt; RHO = &lt;rho&gt; DAMPING = &lt;material_damping&gt; WARPORI = &lt;l1_x, l1_y, l1_z&gt; WEFTORI = &lt;l2_x, l2_y, l2_z&gt; KELONGWARP = &lt;kelong1_1, kelong1_2, kelong1_n&gt; KELONGWEFT = &lt;kelong2_1, kelong2_2, kelong2_n&gt; KSHEAR = &lt;kshear_1, kshear_2, kshear_n&gt;\n</code></pre>"},{"location":"docs/theory/materials/materials_overview/#references","title":"References","text":"<ol> <li> <p>Guzman-Maldonado, E., Hamila, N., Boisse, P. &amp; Bikard, J. Thermomechanical analysis, modelling and simulation of the forming of pre-impregnated thermoplastics composites. Composites Part A: Applied Science and Manufacturing 78, 211--222 (2015).\u00a0\u21a9</p> </li> <li> <p>Guzman-Maldonado, E., Hamila, N., Naouar, N., Moulin, G. &amp; Boisse, P. Simulation of thermoplastic prepreg thermoforming based on a visco-hyperelastic model and a thermal homogenization. Materials\\ &amp; Design 93, 431--442 (2016).\u00a0\u21a9</p> </li> </ol>"},{"location":"docs/theory/solvers/solvers_overview/","title":"Solvers","text":"<p>The scheme used in Comfor is explicit dynamics. This type of scheme allows a conditional step by step resolution of a dynamics problem. The equation of the dynamics, valid at any time, is written in the form :</p> \\[\\begin{equation}     \\mathbf{M} \\mathbf{a} + \\mathbf{C}^{d} \\mathbf{v} + \\mathbf{f}_{int} = \\mathbf{f}_{ext} \\end{equation}\\] <p>In order to solve this equation using a time integration scheme, time is first discretized into increments, or time steps. The dynamics equation becomes :</p> \\[\\begin{equation}     \\mathbf{M} \\mathbf{a}^i + \\mathbf{C}^d \\mathbf{v}^i + \\mathbf{f}_{int}^i = \\mathbf{f}_{ext}^i  \\end{equation}\\] <p>The time integration scheme will define how displacements, velocities and accelerations are approximated from one increment to the next.</p>"},{"location":"docs/theory/solvers/solvers_overview/#central_difference_scheme","title":"Central difference scheme","text":"<p>The most popular, and currently implemented method on comfor is the central difference method. This method is developed from the central difference formulas applied for acceleration and velocity<sup>1</sup> <sup>2</sup>. </p> <p>Let the time of the simulation be \\(t_0 \\leq t \\leq t_e\\) be subdivided in time steps \\(\\Delta t^n\\) from \\(n=1\\) to \\(n = n_e\\) where \\(n_e\\) is the number of time steps and \\(t_e\\) the end time of the simulation. The time after the n-th integration is \\(t^n\\). </p> \\[\\begin{equation} t^n  = t_0 + \\sum_{i=1}^{n} \\Delta t^i \\end{equation}\\] <p>Without lost of generality lets put \\(t_0 =0\\). The coordinates of every point \\(\\mathbf x\\) at time \\(t^{n+1}\\) is given by:</p> \\[\\begin{equation} \\mathbf x^{n+1} = \\mathbf x^{n} + \\mathbf u^{n+1}  \\end{equation}\\] <p>The displacement vector at time \\(t+1\\) are integrate using the velocities evaluated at time \\(t^{n+1/2} = t^n + \\frac{1}{2} \\Delta t^{n+1}\\)</p> \\[     \\mathbf u^{n+1} = \\mathbf u^{n} + \\Delta t^{n+1} \\mathbf{v} \\left( t_{n+1/2} \\right) = \\mathbf u^{n} + \\Delta t^{n+1} \\mathbf{v}^{n+1/2}  \\] <p>The velocity \\(\\mathbf{v}^{n+1/2}\\) is often refereed as staggered with respect ti the coordinate system. The velocity is integrated from de from the acceleration at time \\(t^n\\)</p> \\[     \\mathbf{v}^{n+1/2} =  \\mathbf{v}^{n-1/2} +   \\Delta t^{n+1/2} \\mathbf{a}^n \\] <p>where \\(\\Delta t^{n+1/2} = \\left( t^{n+1/2} - t^{n-1/2} \\right)\\), or:</p> \\[  \\Delta t^{n+1/2} = \\frac {\\Delta t^{n+1} + \\Delta t^{n}}{2}  \\] <p>Finally the acceleration  is obtained by solving the dynamic equilibrium at current time \\(t\\):</p> \\[\\begin{equation}     \\mathbf{a} = \\mathbf{a} = \\mathbf{M}^{-1}(\\mathbf{f}_{ext}^n - \\mathbf{f}_{int}^n  - \\mathbf{C}^{d}\\mathbf{v}^{n-1/2}  ) \\end{equation}\\] <p>This scheme as all the explicit integrations methods is conditionally stable. If the time step exceeds a critical value \\(\\Delta t_{crit}\\) the solution will diverge. The stable time step of the dynamic system is given by:</p> \\[  \\Delta t \\leq  \\alpha \\Delta t_{crit} = \\frac{2}{\\omega_{max}} \\] <p>\\(\\omega_{max}\\) is the maximum frequency of the eigen value problem and \\(\\alpha\\) is a safety factor, typically used to guarantee that the time step is conservative. In order to avoid a calculation of eigenvalues, this value can be bounded by taking by analogy the calculation of the eigenvalues of an elastic bar of length \\(l\\). The maximum frequency is given by:</p> \\[  \\omega = \\frac{2}{l} \\sqrt{\\frac{E}{\\rho}} = \\frac{2c}{l} \\] <p>The critical time step is then given by:</p> \\[  \\Delta t_{crit} = \\frac{l}{c} \\] <p>For three and three dimension, similar results apply by choosing a characteristic element length \\(l_e\\) and the current elastic wave speed in the element \\(c_e\\). During the update loop over the elements, the stable time step for each element is computed, and the minimum step time becomes the time step for the whole system.</p> \\[  \\Delta t = \\alpha \\min_{e} \\frac{l_e}{c_e} \\] <p>Usually a safety factor \\(\\alpha\\) of 0.9 is used to guarantee convergence. Or, 0.25 to 0.50 in the case of problems involving explosives. </p>"},{"location":"docs/theory/solvers/solvers_overview/#newmark_scheme","title":"Newmark scheme","text":"<p>The Newmark \\(\\beta_2\\) and corresponds to a Taylor series development of the displacements, truncated at the jerk, with weighting coefficients \\(\\beta\\) and \\(\\gamma\\) :</p> \\[\\begin{align}     \\mathbf{u}^{n+1} &amp; = \\mathbf{u}^{n} + \\Delta t \\mathbf{v}^{n} + \\frac{1}{2} \\Delta t^2 \\mathbf{a}^{n} + \\beta \\frac{1}{2} \\Delta t^2 \\left(\\mathbf{a}^{n+1} - \\mathbf{a}^{n} \\right) \\\\     \\mathbf{v}^{n+1} &amp; = \\mathbf{v}^{n} + \\Delta t \\mathbf{a}^{n} + \\gamma \\Delta t \\left(\\mathbf{a}^{n+1} - \\mathbf{a}^{n} \\right) \\end{align}\\] <p>From these expression we can write two sets, called prediction terms:</p> \\[\\begin{align}     \\tilde{\\mathbf{u}}^{n+1} &amp; = \\mathbf{u}^{n} + \\mathbf{v}^{n} + \\frac{1}{2} \\Delta t^2 \\left( 1 - \\beta \\right) \\mathbf{a}^{n} \\\\     \\tilde{\\mathbf{v}}^{n+1} &amp; = \\mathbf{v}^{n} + \\Delta t \\left( 1 - \\gamma \\right) \\mathbf{a}^{n}  \\end{align}\\] <p>and correction:</p> \\[\\begin{align}     \\mathbf{u}^{i+1} &amp; = \\tilde{\\mathbf{u}}^{i+1} + \\beta \\frac{1}{2} \\Delta t^2 \\mathbf{a}^{i+1} \\\\     \\mathbf{v}^{i+1} &amp; = \\tilde{\\mathbf{v}}^{i+1} + \\gamma \\Delta t \\mathbf{a}^{i+1}  \\end{align}\\] <p>The objective is now to find the acceleration at the new time step:</p> \\[     \\mathbf{a}^{n+1} = - \\mathbf{A}^{-1} \\left( \\mathbf{f}_{ext}^{n+1} + \\mathbf{C}^{d} \\tilde{\\mathbf{v}}^{n+1} + \\mathbf{K} \\tilde{\\mathbf{u}}^{n+1} \\right)  \\] <p>where:</p> \\[\\begin{equation}     \\mathbf{A} = \\mathbf{M} + \\gamma \\Delta t \\mathbf{C}^{d} + \\frac{1}{2} \\beta \\Delta t^2 \\mathbf{K} \\end{equation}\\] <p>The parameters \\(\\gamma\\) and \\(\\beta\\) of the algorithm allow to obtain different integration schemes, adapted to a given problem. Two types of resolution are then possible. The explicit resolution which allows to know the displacement at the next increment only with the help of the displacement, the speed and the acceleration at the previous step. Conversely, when this is not possible, the resolution is called implicit. The latter are generally stable for large time steps and ensure by construction the convergence of the dynamics equation. The explicit schemes are conditionally stable. Their stabilization implies the use of small time steps depending on the mesh and the material used. On the other hand, the absence of convergence verification allows to solve more easily non linear problems (geometrical, material or contact). </p>"},{"location":"docs/theory/solvers/solvers_overview/#lumped_mass_matrix","title":"Lumped mass matrix","text":"<p>In explicit dynamics, the mass and damping matrices are taken diagonally. The inversion of these matrices is then extremely simplified. A method of mass matrix condensation is used (mass lumping<sup>3</sup>). The condensation of the matrix is done by summing on the diagonal the terms of the same row:</p> \\[\\begin{equation}     \\tilde{M}_{ii} = \\sum_j {M}_{ij} \\end{equation}\\] <p>This method using a diagonal approximation speeds up the calculation, while being reasonable since globally \\(M_{ij} \\neq 0\\) is small for each row \\(i\\) and is associated with geometrically close degrees of freedom. The loss of accuracy is largely compensated by the gain in computation time. In addition, the damping matrix is computed as a function of the mass matrix using a special case of Rayleigh damping, such that \\(\\mathbf{C}^d=\\alpha \\mathbf{M}\\).</p>"},{"location":"docs/theory/solvers/solvers_overview/#references","title":"References","text":"<ol> <li> <p>Belytschko, T., Liu, W. K., Moran, B. &amp; Elkhodary, K. I. Nonlinear finite elements for continua and structures. (Wiley, 2014).\u00a0\u21a9</p> </li> <li> <p>Benson, D. J. Explicit Finite Element Methods for Large Deformation Problems in Solid Mechanics. in Encyclopedia of Computational Mechanics Second Edition 1--43 (Wiley, 2017).\u00a0\u21a9</p> </li> <li> <p>Zienkiewicz, O. C., Taylor, R. L. &amp; Zhu, J. Z. The Finite Element Method: Its Basis and Fundamentals. (Elsevier/Butterworth-Heinemann, 2005).\u00a0\u21a9</p> </li> </ol>"},{"location":"faq/faq/","title":"FAQ","text":"<p>This FAQ covers common questions about Comfor, from installation and usage to development and scientific applications.</p>"},{"location":"faq/faq/#installation","title":"Installation","text":"What are the system requirements for Comfor? <p>Comfor is supported on Windows (win64), Linux (amd64), and macOS (amd64). Using any other architecture is not guaranteed to work. Minimum requirements:</p> <ul> <li>C++ Compiler (C++17/20 support):<ul> <li>GCC \u2265 9 (Linux)</li> <li>Clang \u2265 7 (macOS/Linux)</li> <li>MSVC \u2265 2019 (Windows)</li> </ul> </li> <li>CMake \u2265 3.15</li> <li>Git</li> </ul> <p>For more details, see the Download and Quick start pages.</p> How do I install Comfor from source? <p>Follow the instructions in the Quick start Page.</p> Are there pre-built binaries available? <p>Yes! Pre-built binaries are available on the Download Page.</p> How do I verify my installation? <p>Run the test suite as described in the Quick start Page.</p>"},{"location":"faq/faq/#getting_started","title":"Getting Started","text":"Where can I find a quick starter guide? <p>See the Quick start Page.</p> How do I define a material model? <p>Material models are documented in the Materials Documentation.</p> How do I run a simulation? <p>Run Comfor from the terminal using: <pre><code>comfor &lt;input_file_name&gt;\n</code></pre> For more details, see the Running Section.</p> Where can I find example cases? <p>Example cases are included in the source code under the <code>Examples/</code> directory.</p> <p>You can also download examples.</p>"},{"location":"faq/faq/#physics_and_models","title":"Physics and Models","text":"What finite element formulations are supported? <p>See the Elements Documentation for a full list.</p> How are boundary conditions applied? <p>Boundary conditions are documented in the Preprocessing Documentation.</p>"},{"location":"faq/faq/#development","title":"Development","text":"How can I contribute to Comfor? <p>See the Code of Conduct and Git Guide for contribution guidelines.</p>"},{"location":"faq/faq/#scientific_and_academic_use","title":"Scientific and Academic Use","text":"Is Comfor peer-reviewed? <p>Comfor's numerical methods are published and validated in collaboration with academic and industrial partners. </p> <p>Note</p> <p>Comfor is provided \"as is\" and is intended for research and academic use.</p> Can I use Comfor for my research? <p>Yes, Comfor is available for research and academic purposes under the terms of its license. You may modify the software or create derivative works only for research or academic use. For commercial use or redistribution, a separate license agreement with Innovamics is required. See the License Page for full details.</p>"},{"location":"faq/faq/#troubleshooting","title":"Troubleshooting","text":"My simulation crashes. What should I do? <ol> <li>Check the log file.</li> <li>Report the issue on GitLab with the error log and input file.</li> </ol> How do I report a bug? <p>Open an issue on GitLab with a minimal input file and the full error log.</p>"},{"location":"faq/faq/#miscellaneous","title":"Miscellaneous","text":"Is Comfor free? <p>Comfor is available free of charge for research and academic use under the terms of its license. See the License Page for details.</p> Can I use Comfor for commercial projects? <p>Comfor is not available for commercial use under its standard license. For proprietary or commercial use, please contact Innovamics to negotiate a separate license agreement. See the License Page for more information.</p> How do I stay updated on new releases? <ul> <li>Check the Versions Page for the latest updates.</li> <li>Watch the GitLab repository for real-time notifications.</li> </ul>"},{"location":"overview/download/","title":"Downloads","text":"<p>This page provides downloads for the Comfor Community Edition, the open-source version of Comfor designed for research and educational use.</p> <p>For advanced features, enterprise integrations, and professional support, see Comfor Enterprise.</p>"},{"location":"overview/download/#latest_community_version_v080","title":"Latest Community Version \u2014 v0.8.0","text":"Windows Linux macOS  <p>Download Comfor V0.8.0 for Windows (Visual Studio 2019)</p> <p>Windows 7/10 </p> <p>Note</p> <p>For Windows : Install the corresponding Visual C++ redistributable packages for Visual Studio</p> <p>Download Comfor V0.8.0 for Ubuntu 18.04 (GCC 7.5.0)</p> <p>Ubuntu 18.04 </p> <p>Download Comfor V0.8.0 for Ubuntu 20.04 (GCC 9.3.0)</p> <p>Ubuntu 20.04 </p> <p>Download Comfor V0.8.0 for Rocky Linux 8 (GCC 9.2.1)</p> <p>Rocky Linux 8 </p> <p>Download Comfor V0.8.0 for macOS Sonoma (Clang 15.0.0)</p> <p>macOS Monterey </p> <p>Info</p> <p>Browse the archives for previous versions.</p>"},{"location":"overview/download/#examples","title":"Examples","text":"<p>Some examples to run with comfor:</p> <ul> <li>Click to Download the examples</li> </ul>"},{"location":"overview/quick_starter_guide/","title":"Quick Start","text":"<p>This tool has been compiled and tested on Windows (win64), Linux (amd64), and macOS(amd64). Using any other architecture, is not guaranteed to work.</p>"},{"location":"overview/quick_starter_guide/#download","title":"Download","text":"<p>To run Comfor you can download the binaries from the release page or you can build it from source. For download the binary for your architecture and follow the instructions given here and run some test.</p> <p>To build Comfor from sources you will need to download an compile the code. If so, follow these instructions.</p>"},{"location":"overview/quick_starter_guide/#build_from_sources","title":"Build from sources","text":""},{"location":"overview/quick_starter_guide/#prerequisites","title":"Prerequisites","text":"<p>CMake : a cross-platform, open-source build system generator. Allows to generate a project for a given IDE (Unix Makefiles, Xcode, Eclipse, etc...) or compilation rules for Comfor. It can be easily installed under linux with the following command:</p> <pre><code>sudo apt install cmake\n</code></pre> <p>On MacOS using brew:</p> <pre><code>brew install cmake\n</code></pre> <p>Binaries files for Mac OS and Windows can be downloaded at cmake.org</p> <p>C++ Compiler</p> <p>Comfor is written in C++ and it needs at least a c++ compiler that support C++ 17 language features.</p> <p>Examples:</p> <ul> <li>gcc &gt;= 9</li> <li>clang libc++ &gt;=7</li> <li>Apple clang &gt;= 11.0.0</li> <li>MSVC &gt;= 2015</li> </ul> <p>Under Ubuntu 18.04/20.04, you can use gcc this can be installed with the following command:</p> <pre><code>sudo apt install build-essential\n</code></pre> <p>Under Mac OS verify if the Clang compiler is already installed.</p> <pre><code>clang --version\n</code></pre> <p>If you want to install or update the Clang compilers, enter the command:</p> <pre><code>command xcode-select --install\n</code></pre> <p>Under Windows you can use a POSIX environnement like MSYS2 or Mingw or Mysys. Since version 0.2.1.</p> <p>Note</p> <p>Comfor is compatible with Microsoft C++ compilers (Tested using Visual C++ 2019 ).</p> <p>Warning</p> <p>Mingw32 is not fully compatible with google-test, a popular library to build unit an integration test (see issue 2418). You can compile Comfor but you cannot build the binary files for the test cases.</p> <p>Python</p> <p>Note</p> <p>This is only useful for testing and documentation.</p> <p>Python modules are used to generate the documentation and charts during testing . Make sure that python and the following packages are installed.</p> <ul> <li>Charts: Matplotlib</li> <li>This site: Mkdocs</li> </ul> <p>To install, make sure that Python 3 is installed:</p> <pre><code>python3 --version\n</code></pre> <p>And install the packages using pip</p> <pre><code>python3 -m pip install &lt;package name&gt;\n</code></pre> <p>Warning</p> <p>On windows comfor is currently working by installing the standalone Python 3.8.7 distribution. Anaconda is not yet supported. Make sure that <code>python</code> and <code>pip</code> are on the path.</p>"},{"location":"overview/quick_starter_guide/#clone","title":"Clone","text":"<p>Clone or download the sources from the main repo. If you are not familiarized with Git, check the (Cheat Sheet)</p> <pre><code>git clone https://gitlab.com/innovamics/comfor.git\n</code></pre>"},{"location":"overview/quick_starter_guide/#compile","title":"Compile","text":""},{"location":"overview/quick_starter_guide/#using_make","title":"Using make","text":"<p>Make sure that make is installed on your machine <code>make --version</code>, this is usually the case for macOS and Linux after install the developer tools. If you are not sure, use the cross platform proposition.</p> <p>The compilation rules are generated by Cmake using the <code>CMakeList.txt</code> file included in the projet. A good habit is to encapsulate all the intermediate files generated by Cmake in a single folder (the build). Cmake identifies the architecture, the compiler version and generate the projet (a make file by default under Unix). Finally, make generate the binary according to the compilation rules.</p> <pre><code>cd COMFOR\nmkdir Build\ncmake -DCMAKE_BUILD_TYPE=Release ..\nmake\n</code></pre> <p>The binary files are on the <code>Bin/Release</code> folder.</p> <p>Tip</p> <p>Cmake can generate the project for different IDE (Eclipse, Xcode, Visual code..). In the previous example we assume that the default generator is Unix MakeFiles. You can specify generator using <code>cmake .. -G &lt;generator_name&gt;</code>. To see the available list of generators for your case use: <code>cmake -G</code></p>"},{"location":"overview/quick_starter_guide/#cross_platform_proposition","title":"Cross platform proposition","text":"<p>If you are having troubles compiling the code you can use visual code. Visual code, provides a GUI support and different extension to automatize th compilation process. To configure Visual click here.</p>"},{"location":"overview/quick_starter_guide/#run_and_test","title":"Run and test","text":"<p>You should now have a nice binary file called Comfor. To run comfor you can specify the name of the input file, or run comfor directly, comfor will prompt you for the path to the input file.</p> <pre><code>./comfor\n</code></pre>"},{"location":"overview/quick_starter_guide/#run_it","title":"Run it","text":"<p>Run one of the provided samples in <code>Examples</code> folder using the following the following command. Or download some other test from the download page </p> <pre><code>./comfor PATH_TO_INPUT_FILE\n</code></pre>"},{"location":"overview/quick_starter_guide/#test_it","title":"Test it","text":"<p>In addition to the main binary file, Cmake also generates a series of executables called *Test.o/exe. These files allow to launch a test to see if the different comfor modules are working correctly. You can execute directly this files.</p> <p>Example:</p> <pre><code>./AmplitudeTest\n</code></pre> <p>Expected result :</p> <pre><code>[==========] Running 5 tests from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 5 tests from TabularTest\n[ RUN      ] TabularTest.parseOne\n[       OK ] TabularTest.parseOne (0 ms)\n[ RUN      ] TabularTest.parseSeveral\n.\n.\n.\n[       OK ] TabularTest.parseFile (2 ms)\n[----------] 5 tests from TabularTest (2 ms total)\n\n[----------] Global test environment tear-down\n[==========] 5 tests from 1 test suite ran. (3 ms total)\n[  PASSED  ] 5 tests.\n</code></pre> <p>If some test fails, please feel free to contact us.</p>"},{"location":"overview/quick_starter_guide/#postprocessing","title":"Postprocessing","text":"<p>Comfor can generate VTK files for the results. Paraview post-processor can be used to visualize those results. Paraview is available at paraview.com</p>"},{"location":"overview/tutorial/","title":"Tutorial","text":"<p>In this tutorial, we will go through a complete example using Comfor \u2014 from input file to result visualization in ParaView.</p> <p>You will learn how to:</p> <ul> <li>Run an existing example provided with Comfor</li> <li>Understand the basic structure of an input file</li> <li>Visualize results in ParaView</li> </ul>"},{"location":"overview/tutorial/#example_overview","title":"Example Overview","text":"<p>For this tutorial, we will use the <code>Feuilles</code> example, which can be downloaded from the Comfor Download page.</p> <p>After extracting the archive, the <code>Feuilles</code> folder structure is:</p> <pre><code>examples/Feuilles/\n \u251c\u2500\u2500 Feuilles.txt        # Input file for the simulation\n \u2514\u2500\u2500 Results_Feuilles/   # Output directory (created after running Comfor)\n</code></pre> <p>The input file is <code>Feuilles.txt</code>, which defines the entire model to be simulated.</p>"},{"location":"overview/tutorial/#the_input_file","title":"The Input File","text":"<p>Here is a simplified version of the <code>Feuilles.txt</code> file:</p> <pre><code>CONTROL\nRUN FROM 0.0 TO 15.0\nPRINT EVERY 0.1\n\nMATERIAL TYPE HYPERELASTIC\nMAT_HYPER RHO = 0.00001 DAMPING = 5.0 TYPE = OGDEN MU = [ -0.09, 13.9, -0.20 ] ALPHA = [ -13.7, 0.10, 5.06 ]\n\nNODES\n1   X= 0.0  Y= 0.0  Z= 0.0  LOAD = GRAVITY\n2   X= 1.0  Y= 1.0  Z= 0.0  LOAD = GRAVITY\n3   X= 2.0  Y= 2.0  Z= 0.0  LOAD = GRAVITY\n\nELEMENTS TYPE MEMBRANE_3\n1   nodes = [1,2,3] MATERIAL = MAT_HYPER T = 1.0 FACTOR = 10.0 CONTACT = EDGE\n</code></pre> <p>Each section (or block) defines a different part of the simulation:</p> <ul> <li><code>CONTROL</code> \u2014 defines simulation time and output frequency</li> <li><code>MATERIAL</code> \u2014 defines material properties</li> <li><code>NODES</code> and <code>ELEMENTS</code> \u2014 define the mesh and connectivity</li> <li><code>CONSTRAINT</code> and <code>LOAD</code> \u2014 apply boundary conditions and loads</li> </ul> <p>For the full description of all available blocks, see Input file reference.</p>"},{"location":"overview/tutorial/#running_the_simulation","title":"Running the Simulation","text":"<p>Before running the simulation, we move the Comfor executable (<code>.exe</code>) into the example directory. This makes it easier to access the input file directly without specifying a long path.</p> <ol> <li> <p>Open a terminal (or Command Prompt) inside the example folder</p> </li> <li> <p>Run the executable:     <pre><code>comfor.exe\n</code></pre></p> <p>Note</p> <p>Replace <code>comfor.exe</code> with the actual name of your executable file if it is different.</p> </li> <li> <p>When the program starts, it will ask for the path to the input file. In this example, the input file is located in the <code>Feuilles</code> folder, so type:     <pre><code>Feuilles/Feuilles.txt\n</code></pre></p> </li> </ol> <p>Comfor will then read the input file and start the simulation.</p> Running Comfor in the terminal <p>During execution, Comfor displays information about the simulation progress, for example:</p> <pre><code>=================================\nElapsed time: 0.23s\nCurrent time: 5.0\nInternal energy: 3.24\nKinetic energy: 0.12\n=================================\n</code></pre> <p>When the computation is finished, a results folder (e.g. <code>Results_Feuilles/</code>) will appear in the same directory. This folder contains the generated <code>.vtk</code> files that can be visualized in ParaView.</p> <p>Note</p> <p>It is also possible to keep the executable elsewhere and provide the full path to the input file when prompted. However, moving the <code>.exe</code> into the example folder simplifies the workflow for beginners.</p>"},{"location":"overview/tutorial/#visualizing_results_in_paraview","title":"Visualizing Results in ParaView","text":"<p>To open the results in ParaView:</p> <ol> <li>Launch ParaView</li> <li>Go to File \u2192 Open</li> <li>Select the directory <code>Results_Feuilles/</code></li> <li>Choose all <code>.vtk</code> files</li> <li>Click Apply</li> </ol> <p>If nothing appears, make sure the \u201ceye\u201d icon next to the dataset is enabled.</p> <p>Hint</p> <p>Enable Auto Apply in Edit \u2192 Settings \u2192 General \u2192 Properties Panel Options to automatically apply changes in ParaView.</p> Opening the VTK result files in ParaView <p>You can now play the animation using the playback controls in the VCR bar. The time bar will display the current simulation time.</p>"},{"location":"overview/tutorial/#next_steps","title":"Next Steps","text":"<p>You have now completed your first Comfor simulation.</p> <p>To learn more:</p> <ul> <li>Overview Documentation</li> <li>Material Models</li> </ul>"},{"location":"overview/versions/","title":"Versions","text":""},{"location":"overview/versions/#last_version_v080","title":"Last version <code>V0.8.0</code>","text":"<ul> <li>Windows 7/10<ul> <li>Download Comfor V0.8.0 for Windows (Visual Studio 2019)</li> </ul> </li> <li>Ubuntu 18.04<ul> <li>Download Comfor V0.8.0 for Ubuntu 18.04 (GCC 7.5.0)</li> </ul> </li> <li>Ubuntu 20.04<ul> <li>Download Comfor V0.8.0 for Ubuntu 20.04 (GCC 9.3.0)</li> </ul> </li> <li>Rocky Linux 8<ul> <li>Download Comfor V0.8.0 for Rocky Linux 8 (GCC 9.2.1)</li> </ul> </li> <li>macOS Monterey<ul> <li>Download Comfor V0.8.0 for macOS Sonoma (Clang 15.0.0)</li> </ul> </li> </ul>"},{"location":"overview/versions/#version_v074","title":"Version <code>V0.7.4</code>","text":"<ul> <li>Windows 7/10<ul> <li>Download Comfor V0.7.4 for Windows (Visual Studio 2019)</li> </ul> </li> <li>Ubuntu 18.04<ul> <li>Download Comfor V0.7.4 for Ubuntu 18.04 (GCC 7.5.0)</li> </ul> </li> <li>Ubuntu 20.04<ul> <li>Download Comfor V0.7.4 for Ubuntu 20.04 (GCC 9.3.0)</li> </ul> </li> <li>macOS Monterey<ul> <li>Download Comfor V0.7.4 for macOS (Clang 13.0.0)</li> </ul> </li> </ul>"},{"location":"overview/versions/#version_v051","title":"Version <code>V0.5.1</code>","text":"<ul> <li>Windows<ul> <li>Download Comfor V0.5.1 for Windows (Visual Studio 2019)&lt;</li> </ul> </li> <li>Ubuntu<ul> <li>Download Comfor V0.5.0 for Ubuntu 20.04 (GCC 10.2.0)</li> </ul> </li> <li>macOS Big Sur<ul> <li>Download Comfor V0.5.1 for macOS (Clang 11.0.3)</li> </ul> </li> </ul>"},{"location":"services/academy/","title":"Academy","text":""},{"location":"services/academy/#services","title":"Services","text":"<p>Through the Comfor Academy, we provide dedicated training programs for students, researchers, and academic institutions. Our goal is to make advanced simulation techniques for composite forming and processing accessible to learners of all levels, helping them gain confidence, efficiency, and save valuable time in their thesis or research preparation.</p>"},{"location":"services/academy/#training_programs","title":"Training Programs","text":"<p>Our academic training is focused on bridging theory and practice in numerical simulation.</p> <p>We offer:</p> <ul> <li>Simulation with Comfor: hands-on sessions to learn, use, and master the   Comfor environment for material forming and contact mechanics  </li> <li>Scientific software development: courses coveqring the fundamentals and   best practices of modern C++ and Python development applied to simulation and   research workflows  </li> </ul> <p>These programs help students and educators build strong technical foundations, develop research autonomy, and apply simulation tools effectively to real engineering or scientific challenges.</p>"},{"location":"services/academy/#collaboration","title":"Collaboration","text":"<p>We actively collaborate with universities, research laboratories, and academic partners on research and development projects. Our aim is to accelerate innovation and promote open, reproducible science in the field of composites simulation.</p> <p>Together, we can: - Develop and validate new simulation techniques - Propose and implement advanced constitutive models - Co-supervise academic theses and research projects  </p> <p>If your institution is seeking an academic or industrial partner in simulation and modeling, we are ready to work with you.</p>"},{"location":"services/industry/","title":"Industry","text":""},{"location":"services/industry/#comfor_editions","title":"Comfor Editions","text":"<p>Comfor is distributed under a dual licensing model to support both open research and industrial applications.</p> <ul> <li>Comfor Community (Open Source): Open-source edition for research and   education, enabling transparency, reproducibility, and collaborative   innovation.</li> <li>Comfor Enterprise (Commercial License): Professional edition   designed and maintained by Innovamics, offering enhanced performance,   stability, and dedicated support.</li> </ul>"},{"location":"services/industry/#comfor_enterprise","title":"Comfor Enterprise","text":"<p>Comfor Enterprise is the enhanced version of our software. It provides high-performance simulation, advanced configuration options, and robust scalability for large-scale or production workflows.</p> <p>Enterprise users benefit from:</p> <ul> <li>Extended modules</li> <li>Priority updates and dedicated support</li> <li>Advanced configuration and deployment options</li> <li>Optimized performance for large-scale environments</li> <li>Integration capabilities with enterprise infrastructure</li> </ul>"},{"location":"services/industry/#professional_services","title":"Professional Services","text":"<p>Our team provides a full range of services to help you leverage Comfor and related technologies effectively:</p> <ul> <li>Case studies : tailored analysis and demonstration for your specific use case</li> <li>Training programs: hands-on sessions for engineers and researchers</li> <li>Research &amp; development : custom features and innovation partnerships</li> </ul>"},{"location":"services/industry/#collaboration","title":"Collaboration","text":"<p>We believe in the value of collaboration. If you are working on innovative projects or research initiatives, we are open to collaborative partnerships.</p> <p>Together, we can:</p> <ul> <li>Co-develop new features or extensions</li> <li>Conduct joint R&amp;D efforts</li> <li>Explore integration opportunities between Comfor and your technologies</li> </ul>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2025/#2025","title":"2025","text":""},{"location":"blog/category/news/","title":"News","text":""},{"location":"blog/category/news/#news","title":"News","text":""}]}